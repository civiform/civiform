<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration>

<configuration>
  <import class="ch.qos.logback.classic.encoder.PatternLayoutEncoder" />
  <import class="ch.qos.logback.classic.AsyncAppender" />
  <import class="ch.qos.logback.core.FileAppender" />
  <import class="ch.qos.logback.core.ConsoleAppender" />
  <import class="net.logstash.logback.encoder.LogstashEncoder" />

  <!--
      The `LogstashEncoder` has made Logback extremely noise on startup. Setting
      debug="false" to the configuration element has no effect because that does
      not take effect until after.

      This `NopStatusListener` only affects logging statements coming from Logback
      itself. Logging coming from our application remains unaffected.

      If this were a one time thing at startup of the container it wouldn't be so
      bad, but every time the hot reload occurs around 50-100 lines from Logback
      restarting are dumped to the console. This makes it much more difficult to
      view the logs for issues during development.
  -->
  <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

  <appender name="FILE" class="FileAppender">
    <file>${application.home:-.}/logs/application.log</file>
    <encoder class="PatternLayoutEncoder">
      <pattern>%date [%level] from %logger in %thread - %message%n%xException</pattern>
    </encoder>
  </appender>

  <appender name="JSON" class="ConsoleAppender">
    <encoder class="LogstashEncoder">
      <fieldNames>
        <timestamp>timestamp</timestamp>
        <level>severity</level>
        <version>[ignore]</version>
        <levelValue>[ignore]</levelValue>
      </fieldNames>
      <includeContext>false</includeContext>
    </encoder>
  </appender>

  <appender name="STDOUT" class="ConsoleAppender">
    <encoder class="PatternLayoutEncoder">
      <pattern>%highlight(%-5level) %logger{15} - %message%n%xException{20}</pattern>
    </encoder>
  </appender>

  <appender name="ASYNCFILE" class="AsyncAppender">
    <appender-ref ref="FILE" />
  </appender>

  <appender name="ASYNCJSON" class="AsyncAppender">
    <appender-ref ref="JSON" />
  </appender>

  <appender name="ASYNCSTDOUT" class="AsyncAppender">
    <appender-ref ref="STDOUT" />
  </appender>

  <logger name="play" level="INFO" />
  <logger name="application" level="DEBUG" />
  <logger name="loggingfilter" level="INFO" />
  <logger name="controllers" level="INFO" />
  <logger name="repository" level="INFO" />
  <logger name="services" level="INFO" />
  <logger name="s3client" level="INFO" />
  <logger name="io.ebean" level="INFO" />
  <logger name="org.pac4j" level="INFO" />
  <logger name="auth" level="INFO" />
  <!-- Increase the level of this one to avoid leaking PII (such as email and name) into logs -->
  <logger name="org.pac4j.saml.credentials.SAML2Credentials" level="WARN" />

  <!-- Off these ones as they are annoying. -->
  <logger name="com.gargoylesoftware.htmlunit" level="OFF" />
  <logger name="org.apache.http.wire" level="OFF" />

  <!--
      When using the ebeans logging, it is recommended to set the poll_interval_seconds in
      the server/conf/helper/jobs.conf file to a very large number to avoid excess noise.

      Set level="TRACE" to show in the logs.

      io.ebean.SQL -> for SQL and bind values
      io.ebean.TXN -> for Transaction commit and rollback events
      io.ebean.SUM -> for lazy loading queries and how they relate back to origin queries
  -->
  <logger name="io.ebean.SQL" level="OFF" />
  <logger name="io.ebean.TXN" level="OFF" />
  <logger name="io.ebean.SUM" level="OFF" />

  <!--
    If the environment variable LOGBACK_CONSOLE_APPENDER is set, then it will used as the
    appender for console logging.  If the environment variable is not set, then the ASYNCSTDOUT
    appender wil be used.

    This environment variable is used in GCP deployemnts to reference ASYNCJSON appender.
  -->
  <root level="WARN">
    <appender-ref ref="ASYNCFILE" />
    <appender-ref ref="${LOGBACK_CONSOLE_APPENDER:-ASYNCSTDOUT}" />
  </root>
</configuration>
