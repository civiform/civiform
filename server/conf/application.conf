# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
  logger-startup-timeout = 30s
}

## Whitelabeling
whitelabel {
  # The URL of images to be used as the civic entity's logo, will use local
  # assets of the Seattle logo if not set.
  # Small logo used on the login page.
  small_logo_url = ${?WHITELABEL_SMALL_LOGO_URL}
  # Logo with name used on the applicant-facing program index page.
  logo_with_name_url = ${?WHITELABEL_LOGO_WITH_NAME_URL}

  # The short display name of the civic entity, will use "TestCity" if not set.
  civic_entity_short_name = "TestCity"
  civic_entity_short_name = ${?WHITELABEL_CIVIC_ENTITY_SHORT_NAME}

  # The full display name of the civic entity, will use "City of TestCity" if not set.
  civic_entity_full_name = "City of TestCity"
  civic_entity_full_name = ${?WHITELABEL_CIVIC_ENTITY_FULL_NAME}

  # The URL of a 32x32 or 16x16 pixel [favicon](https://developer.mozilla.org/en-US/docs/Glossary/Favicon)
  # image, in GIF, PNG, or ICO format.
  favicon_url = "https://civiform.us/favicon.png"
  favicon_url = ${?FAVICON_URL}
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "changeme"
play.http.secret.key = ${?SECRET_KEY}

auth {
  # Configure which IDP to use for applicant and admin authentication.
  applicant_idp = "idcs"
  applicant_idp = ${?CIVIFORM_APPLICANT_IDP}

  # Logout options when using OIDC (idcs, or applicant_generic_oidc)

  # Enables central logout:
  # https://docs.civiform.us/contributor-guide/developer-guide/authentication-providers#logout
  oidc_provider_logout = true
  oidc_provider_logout = ${?APPLICANT_OIDC_PROVIDER_LOGOUT}

  # By default for logout endpoint 'end_session_endpoint' from auth provider
  # discovery metadata file is used. But for some integration that standard flow
  # might not be working and we need to override logout URL.
  oidc_override_logout_url = ${?APPLICANT_OIDC_OVERRIDE_LOGOUT_URL}

  # URL param used to pass post logout redirect url in the logout request to the
  # auth provider. It defaults to 'post_logout_redirect_uri' if this value is
  # unset. If this value set to empty string - post logout redirect url is not
  # passed at all and instead it needs to be hardcoded on the auth provider
  # (otherwise user won't be redirected back to civiform after logout).
  oidc_post_logout_param = ${?APPLICANT_OIDC_POST_LOGOUT_REDIRECT_PARAM}

  # URL param used to pass client id in the logout request to the auth provider.
  # If unset - client id is not added to the request.
  oidc_logout_client_id_param = ${?APPLICANT_OIDC_LOGOUT_CLIENT_PARAM}

  # Direct URI to create new account.
  register_uri = ${?APPLICANT_REGISTER_URI}
}

## IDCS integration
# IDCS secrets must be provided by environment variables - we cannot check them in.
idcs.client_id = ${?IDCS_CLIENT_ID}
idcs.secret = ${?IDCS_SECRET}
idcs.discovery_uri = "https://idcs-f582fefb879b4db5a88a370e8f2f6013.identity.oraclecloud.com/.well-known/openid-configuration"
idcs.discovery_uri = ${?IDCS_DISCOVERY_URI}

## LoginRadius integration
# LoginRadius secrets must be provided by environment variables - we cannot check them in.
login_radius.api_key = ${?LOGIN_RADIUS_API_KEY}
login_radius.metadata_uri = "https://civiform-staging.hub.loginradius.com/service/saml/idp/metadata"
login_radius.metadata_uri = ${?LOGIN_RADIUS_METADATA_URI}
login_radius.saml_app_name = "civiform-saml"
login_radius.saml_app_name = ${?LOGIN_RADIUS_SAML_APP_NAME}
login_radius.keystore_name = "civiformSamlKeystore.jks"
login_radius.keystore_name = ${?LOGIN_RADIUS_KEYSTORE_NAME}
login_radius.keystore_password = ${?LOGIN_RADIUS_KEYSTORE_PASS}
login_radius.private_key_password = ${?LOGIN_RADIUS_PRIVATE_KEY_PASS}

## Generic OIDC integration
# Secrets must be provided by environment variables - we cannot check them in.
applicant_generic_oidc.provider_name = "generic-oidc"
applicant_generic_oidc.provider_name =  ${?APPLICANT_OIDC_PROVIDER_NAME}
applicant_generic_oidc.client_id = ${?APPLICANT_OIDC_CLIENT_ID}
applicant_generic_oidc.client_secret = ${?APPLICANT_OIDC_CLIENT_SECRET}
applicant_generic_oidc.discovery_uri = ${?APPLICANT_OIDC_DISCOVERY_URI}
applicant_generic_oidc.response_mode = "form_post"
applicant_generic_oidc.response_mode = ${?APPLICANT_OIDC_RESPONSE_MODE}
applicant_generic_oidc.response_type = "id_token token"
applicant_generic_oidc.response_type = ${?APPLICANT_OIDC_RESPONSE_TYPE}
# Additional Scopes should be space separated values.
applicant_generic_oidc.additional_scopes = ${?APPLICANT_OIDC_ADDITIONAL_SCOPES}

# Provider-based user attributes
applicant_generic_oidc.locale_attribute = ${?APPLICANT_OIDC_LOCALE_ATTRIBUTE}
applicant_generic_oidc.email_attribute = "email"
applicant_generic_oidc.email_attribute = ${?APPLICANT_OIDC_EMAIL_ATTRIBUTE}

# first_name_attribute, middle_name_attribute, and last_name_attribute are
# concatenated if set and present in the oidc response.
applicant_generic_oidc.first_name_attribute ="name"
applicant_generic_oidc.first_name_attribute = ${?APPLICANT_OIDC_FIRST_NAME_ATTRIBUTE}
applicant_generic_oidc.middle_name_attribute = ${?APPLICANT_OIDC_MIDDLE_NAME_ATTRIBUTE}
applicant_generic_oidc.last_name_attribute = ${?APPLICANT_OIDC_LAST_NAME_ATTRIBUTE}


## Login.gov OIDC integration
# https://developers.login.gov/oidc/
login_gov.client_id = "urn:gov:gsa:openidconnect.profiles:sp:sso:ar:civiform_dev"
login_gov.client_id = ${?APPLICANT_OIDC_CLIENT_ID}
login_gov.client_id = ${?LOGIN_GOV_CLIENT_ID}

login_gov.discovery_uri = "https://idp.int.identitysandbox.gov/.well-known/openid-configuration"
login_gov.discovery_uri = ${?APPLICANT_OIDC_DISCOVERY_URI}
login_gov.discovery_uri = ${?LOGIN_GOV_DISCOVERY_URI}

# Additional Scopes should be space separated values.
login_gov.additional_scopes = ${?APPLICANT_OIDC_ADDITIONAL_SCOPES}
login_gov.additional_scopes = ${?LOGIN_GOV_ADDITIONAL_SCOPES}

# [Authentication Context Class Reference requests](https://developers.login.gov/oidc/#request-parameters)
# Valid values are:
# - "http://idmanagement.gov/ns/assurance/ial/1" (Open registration, email only)
# - or "http://idmanagement.gov/ns/assurance/ial/2" (Requires identity verification)
login_gov.acr_value="http://idmanagement.gov/ns/assurance/ial/1"
login_gov.acr_value=${?LOGIN_GOV_ACR_VALUE}

## ADFS integration
# ADFS secrets must be provided by environment variables - we cannot check them in.
adfs.client_id = ${?ADFS_CLIENT_ID}
adfs.secret = ${?ADFS_SECRET}
adfs.discovery_uri = "https://sts.seattle.gov/adfs/.well-known/openid-configuration"
adfs.discovery_uri = ${?ADFS_DISCOVERY_URI}
adfs.admin_group = "ad\\ITD_CiviForm_Admins_Test"
adfs.admin_group = ${?ADFS_GLOBAL_ADMIN_GROUP}
# Additional Scopes should be space separated values.
adfs.additional_scopes = "allatclaims"
adfs.additional_scopes = ${?ADFS_ADDITIONAL_SCOPES}
adfs.ad_groups_attribute_name = "group"
adfs.ad_groups_attribute_name = ${?AD_GROUPS_ATTRIBUTE_NAME}

# Base url must start with http(s)://
base_url = "http://localhost:9000"
base_url = ${?BASE_URL}
# Staging hostname should not start with https(s)://.
staging_hostname = ""
staging_hostname = ${?STAGING_HOSTNAME}

measurement_id = ${?MEASUREMENT_ID}

## Support Email Address
# This email address is listed in the footer for applicants to contact support
support_email_address = "CiviForm@seattle.gov"
support_email_address = ${?SUPPORT_EMAIL_ADDRESS}

staging_program_admin_notification_mailing_list = "seattle-civiform-program-admins-notify@google.com"
staging_program_admin_notification_mailing_list = ${?STAGING_ADMIN_LIST}
staging_ti_notification_mailing_list = "seattle-civiform-trusted-intermediaries-notify@google.com"
staging_ti_notification_mailing_list = ${?STAGING_TI_LIST}
staging_applicant_notification_mailing_list = "seattle-civiform-applicants-notify@google.com"
staging_applicant_notification_mailing_list = ${?STAGING_APPLICANT_LIST}

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to enable, you can list them here.
  #enabled += my.application.Module
  enabled += modules.SecurityModule
  enabled += modules.CloudStorageModule
  enabled += modules.MainModule
  enabled += modules.DatabaseSeedModule
  enabled += modules.ProgramCreationModule

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
#play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages. These are the languages applicants can choose from
  # when specifying their language preference, and admins can choose from when
  # adding translations for programs and applications.
  #
  # Alphabetize all languages besides English.
  langs = [ "en-US", "am", "zh-TW", "ko", "so", "es-US", "tl" , "vi" ]
  # A given deployment can specify a subset of the supported languages above using
  # environment variables. Since the config value is an array, each entry in the
  # array is specified with the environment variable name suffixed with .N where N
  # is the array index. For example to specify support for US English, Korean, and
  # US Spanish, the environment variables would be:
  #   CIVIFORM_SUPPORTED_LANGUAGES.0="en-US"
  #   CIVIFORM_SUPPORTED_LANGUAGES.1="ko"
  #   CIVIFORM_SUPPORTED_LANGUAGES.2="es-US"
  langs = ${?CIVIFORM_SUPPORTED_LANGUAGES}

  # Whether the language cookie should be secure or not
  langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  errorHandler = "controllers.ErrorHandler"

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = true

    sameSite = null

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "localhost"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = true
  }
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "PKCS12", path = "exampletrust.p12" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # Specific caches can be injected using the @NamedCache annotation.
  bindCaches = ["api-keys"]
}

## Security rules for play-pac4j SecurityFilter
# https://github.com/pac4j/play-pac4j/wiki/Apply-security#2-protect-urls-via-the-securityfilter
# ~~~~~
# Specify pac4j authentication clients for request URL paths that match the regex.
# If no regex matches, the filter defaults to using the clients specified in SecurityModule.
# Detailed documentation: https://github.com/pac4j/play-pac4j/blob/f3bd916012bf4cb4e4a97348ce70dd4fe55c132f/shared/src/main/scala/org/pac4j/play/filters/SecurityFilter.scala#L19-L60
pac4j.security.rules = [
  # Authenticate API calls with basic auth
  {
    "/api/.*" = {
      clients = "DirectBasicAuthClient"
    }
  }
]

# If enabled, allows Prometheus server metrics to be retrieved via the "/metrics" URL path.
# If "/metrics" is disabled, returns a 404.
server_metrics.enabled = false
server_metrics.enabled = ${?CIVIFORM_SERVER_METRICS_ENABLED}
# Configuration for monitoring library https://github.com/Jyllands-Posten/play-prometheus-filters
# The Prometheus Hotspot library provides some default collectors for garbage collection, memory pool, etc
play-prometheus-filters.register-default-hotspot-collectors = true

## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.
#
play.filters {
  enabled += com.github.stijndehaes.playprometheusfilters.filters.StatusAndRouteLatencyAndCounterFilter
  enabled += filters.DisableCachingFilter
  enabled += filters.HSTSFilter
  enabled += filters.LoggingFilter
  enabled += filters.ValidAccountFilter
  enabled += play.filters.gzip.GzipFilter
  enabled += filters.UnsupportedBrowserFilter

  gzip {
    threshold = 1000        # don't compress very small responses
    compressionLevel = -1   # -1 is the default compression level (level 6)
    contentType {
      # If non empty, then a response will only be compressed if its content type is in this list.
      whiteList = [ "text/*", "application/javascript", "application/json" ]
    }
  }

  # Enable URL path regex-matching for determining different security logic.
  # Docs: https://github.com/pac4j/play-pac4j/wiki/Apply-security#2-protect-urls-via-the-securityfilter
  # See pac4j.security.rules configuration value above.
  enabled += org.pac4j.play.filters.SecurityFilter

  # This MUST come after org.pac4j.play.filters.SecurityFilter since it relies
  # on the security logic setting ApiKey ID as the profile ID on the request object.
  enabled += filters.ApiKeyUsageFilter

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler

    token.sign = true
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    frameOptions = "SAMEORIGIN"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to localhost on ports 9000 (dev) and 19001 (default test) ports
    # Also allow any host until we get our own domain.
    allowed = ["localhost:9000", "localhost:9999", "localhost:19001", "."]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
  db.default {
    useLocks = true
    autoApply = true
    autoApplyDowns = false
    autoApplyDowns = ${?DATABASE_APPLY_DESTRUCTIVE_CHANGES}
  }
  # Use transactions.
  autocommit = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
# db connections = ((physical_core_count * 2) + effective_spindle_count)
fixedConnectionPool = 9
fixedConnectionPool = ${?DATABASE_CONNECTION_POOL_SIZE}

play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  default.driver = org.postgresql.Driver
  default.url = "jdbc:postgresql://database:5432/postgres"
  default.username = postgres
  default.password = "example"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  default.logSql=false
}

# prod overrides - if environment variables exist, use them!
db.default.url = ${?DB_JDBC_STRING}
db.default.username = ${?DB_USERNAME}
db.default.password = ${?DB_PASSWORD}

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

## EBean
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
ebean.default = "models.*"

## AWS
aws.region=us-west-2
aws.region=${?AWS_REGION}
aws.ses.sender="noreply@fake.identity"
aws.ses.sender=${?AWS_SES_SENDER}
aws.s3.bucket=civiform-local-s3
aws.s3.bucket=${?AWS_S3_BUCKET_NAME}
aws.local.endpoint="http://localhost.localstack.cloud:4566"
# Max size of file in Mb allowed to be uploaded to S3.
aws.s3.filelimitmb=100
aws.s3.filelimitmb=${?AWS_S3_FILE_LIMIT_MB}

## Azure
azure.blob.account=devstoreaccount1
azure.blob.account=${?AZURE_STORAGE_ACCOUNT_NAME}
azure.blob.container=civiform-local-blob
azure.blob.container=${?AZURE_STORAGE_ACCOUNT_CONTAINER}
azure.local.connection="DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;"
azure.local.connection=${?AZURE_LOCAL_CONNECTION_STRING}

## Time zones
civiform.time.zoneid="America/Los_Angeles"
civiform.time.zoneid=${?CIVIFORM_TIME_ZONE_ID}

## Set cloud services
cloud.storage = "s3"
cloud.storage = ${?STORAGE_SERVICE_NAME}

## Feature flags
cf.optional_questions = true
cf.optional_questions = ${?CF_OPTIONAL_QUESTIONS}

civiform_image_tag = "dev"
civiform_image_tag = ${?CIVIFORM_IMAGE_TAG}

# Secret salt for hashing API key secrets. The server will start with the
# default value of "changeme" but the admin will not be able to create API keys
# with it. DO NOT CHANGE THE DEFAULT VALUE WITHOUT ALSO CHANGING THE MATCHING
# VALUE IN ApiKeyService.
api_secret_salt = "changeme"
api_secret_salt = ${?CIVIFORM_API_SECRET_SALT}

api_keys_ban_global_subnet = true
api_keys_ban_global_subnet = ${?CIVIFORM_API_KEYS_BAN_GLOBAL_SUBNET}

# Max and default page size for ProgramApplicationsApiController.list
# This should be kept low enough so that the request completes before hitting the
# load balancer timeout.
api_applications_list_max_page_size = 1000
api_applications_list_max_page_size = ${?CIVIFORM_API_APPLICATIONS_LIST_MAX_PAGE_SIZE}

## Feature flag toggles.
# Launched features.

# When set to true Civiform Admins will see all Applications for all Programs.
allow_civiform_admin_access_programs = false
allow_civiform_admin_access_programs = ${?ALLOW_CIVIFORM_ADMIN_ACCESS_PROGRAMS}

show_civiform_image_tag_on_landing_page = false
show_civiform_image_tag_on_landing_page = ${?SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE}

# Preview features.

# In development features.
# Status Tracking is a default feature as of Jan 2023, this control is deprecated.
application_status_tracking_enabled = true
application_status_tracking_enabled = ${?CIVIFORM_APPLICATION_STATUS_TRACKING_ENABLED}
program_read_only_view_enabled = false
program_read_only_view_enabled = ${?PROGRAM_READ_ONLY_VIEW_ENABLED}


program_eligibility_conditions_enabled = false
program_eligibility_conditions_enabled = ${?PROGRAM_ELIGIBILITY_CONDITIONS_ENABLED}

predicates_multiple_questions_enabled = false
predicates_multiple_questions_enabled = ${?PREDICATES_MULTIPLE_QUESTIONS_ENABLED}

# If enabled allows for setting of feature flags via HTTP.
# This is explicitly not recommended for production and intended to aid
# development and pre-release evaluation of features. In fact it is unlikely to
# work as expected in production if there are multiple servers.
feature_flag_overrides_enabled = false
feature_flag_overrides_enabled = ${?FEATURE_FLAG_OVERRIDES_ENABLED}

# esri address services
# address correction
esri_address_correction_enabled = false
esri_address_correction_enabled = ${?ESRI_ADDRESS_CORRECTION_ENABLED}
esri_find_address_candidates_url = ${?ESRI_FIND_ADDRESS_CANDIDATES_URL}
# address service area validation
esri_address_service_area_validation_enabled = false
esri_address_service_area_validation_enabled = ${?ESRI_ADDRESS_SERVICE_AREA_VALIDATION_ENABLED}
esri_address_service_area_validation_labels = ${?ESRI_ADDRESS_SERVICE_AREA_VALIDATION_LABELS}
esri_address_service_area_validation_ids = ${?ESRI_ADDRESS_SERVICE_AREA_VALIDATION_IDS}
esri_address_service_area_validation_urls = ${?ESRI_ADDRESS_SERVICE_AREA_VALIDATION_URLS}
esri_address_service_area_validation_attributes =  ${?ESRI_ADDRESS_SERVICE_AREA_VALIDATION_ATTRIBUTES}
# the number of tries to make if Esri API returns an error - defaults to 3
esri_external_call_tries = ${?ESRI_EXTERNAL_CALL_TRIES}
