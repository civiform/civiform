auth {
  # Configure which IDP to use for applicant and admin authentication.
  applicant_idp = "idcs"
  applicant_idp = ${?CIVIFORM_APPLICANT_IDP}

  # Logout options when using OIDC (idcs, or applicant_generic_oidc)

  # Enables central logout:
  # https://docs.civiform.us/contributor-guide/developer-guide/authentication-providers#logout
  oidc_provider_logout = true
  oidc_provider_logout = ${?APPLICANT_OIDC_PROVIDER_LOGOUT}

  # By default for logout endpoint 'end_session_endpoint' from auth provider
  # discovery metadata file is used. But for some integration that standard flow
  # might not be working and we need to override logout URL.
  oidc_override_logout_url = ${?APPLICANT_OIDC_OVERRIDE_LOGOUT_URL}

  # URL param used to pass post logout redirect url in the logout request to the
  # auth provider. It defaults to 'post_logout_redirect_uri' if this value is
  # unset. If this value set to empty string - post logout redirect url is not
  # passed at all and instead it needs to be hardcoded on the auth provider
  # (otherwise user won't be redirected back to civiform after logout).
  oidc_post_logout_param = ${?APPLICANT_OIDC_POST_LOGOUT_REDIRECT_PARAM}

  # Direct URI to create new account.
  register_uri = ${?APPLICANT_REGISTER_URI}
}

## IDCS integration
# IDCS secrets must be provided by environment variables - we cannot check them in.
idcs.client_id = ${?IDCS_CLIENT_ID}
idcs.secret = ${?IDCS_SECRET}
idcs.discovery_uri = "https://idcs-f582fefb879b4db5a88a370e8f2f6013.identity.oraclecloud.com/.well-known/openid-configuration"
idcs.discovery_uri = ${?IDCS_DISCOVERY_URI}

## LoginRadius integration
# LoginRadius secrets must be provided by environment variables - we cannot check them in.
login_radius.api_key = ${?LOGIN_RADIUS_API_KEY}
login_radius.metadata_uri = "https://civiform-staging.hub.loginradius.com/service/saml/idp/metadata"
login_radius.metadata_uri = ${?LOGIN_RADIUS_METADATA_URI}
login_radius.saml_app_name = "civiform-saml"
login_radius.saml_app_name = ${?LOGIN_RADIUS_SAML_APP_NAME}
login_radius.keystore_name = "civiformSamlKeystore.jks"
login_radius.keystore_name = ${?LOGIN_RADIUS_KEYSTORE_NAME}
login_radius.keystore_password = ${?LOGIN_RADIUS_KEYSTORE_PASS}
login_radius.private_key_password = ${?LOGIN_RADIUS_PRIVATE_KEY_PASS}

## Generic OIDC integration
# Secrets must be provided by environment variables - we cannot check them in.
applicant_generic_oidc.provider_name = "generic-oidc"
applicant_generic_oidc.provider_name =  ${?APPLICANT_OIDC_PROVIDER_NAME}
applicant_generic_oidc.client_id = ${?APPLICANT_OIDC_CLIENT_ID}
applicant_generic_oidc.client_secret = ${?APPLICANT_OIDC_CLIENT_SECRET}
applicant_generic_oidc.discovery_uri = ${?APPLICANT_OIDC_DISCOVERY_URI}
applicant_generic_oidc.response_mode = "form_post"
applicant_generic_oidc.response_mode = ${?APPLICANT_OIDC_RESPONSE_MODE}
applicant_generic_oidc.response_type = "id_token token"
applicant_generic_oidc.response_type = ${?APPLICANT_OIDC_RESPONSE_TYPE}
# Additional Scopes should be space separated values.
applicant_generic_oidc.additional_scopes = ${?APPLICANT_OIDC_ADDITIONAL_SCOPES}

# Provider-based user attributes
applicant_generic_oidc.locale_attribute = ${?APPLICANT_OIDC_LOCALE_ATTRIBUTE}
applicant_generic_oidc.email_attribute = "email"
applicant_generic_oidc.email_attribute = ${?APPLICANT_OIDC_EMAIL_ATTRIBUTE}

# first_name_attribute, middle_name_attribute, and last_name_attribute are
# concatenated if set and present in the oidc response.
applicant_generic_oidc.first_name_attribute ="name"
applicant_generic_oidc.first_name_attribute = ${?APPLICANT_OIDC_FIRST_NAME_ATTRIBUTE}
applicant_generic_oidc.middle_name_attribute = ${?APPLICANT_OIDC_MIDDLE_NAME_ATTRIBUTE}
applicant_generic_oidc.last_name_attribute = ${?APPLICANT_OIDC_LAST_NAME_ATTRIBUTE}


## Login.gov OIDC integration
# https://developers.login.gov/oidc/
login_gov.client_id = "urn:gov:gsa:openidconnect.profiles:sp:sso:ar:civiform_dev"
login_gov.client_id = ${?APPLICANT_OIDC_CLIENT_ID}
login_gov.client_id = ${?LOGIN_GOV_CLIENT_ID}

login_gov.discovery_uri = "https://idp.int.identitysandbox.gov/.well-known/openid-configuration"
login_gov.discovery_uri = ${?APPLICANT_OIDC_DISCOVERY_URI}
login_gov.discovery_uri = ${?LOGIN_GOV_DISCOVERY_URI}

# Additional Scopes should be space separated values.
login_gov.additional_scopes = ${?APPLICANT_OIDC_ADDITIONAL_SCOPES}
login_gov.additional_scopes = ${?LOGIN_GOV_ADDITIONAL_SCOPES}

# [Authentication Context Class Reference requests](https://developers.login.gov/oidc/#request-parameters)
# Valid values are:
# - "http://idmanagement.gov/ns/assurance/ial/1" (Open registration, email only)
# - or "http://idmanagement.gov/ns/assurance/ial/2" (Requires identity verification)
login_gov.acr_value="http://idmanagement.gov/ns/assurance/ial/1"
login_gov.acr_value=${?LOGIN_GOV_ACR_VALUE}

## ADFS integration
# ADFS secrets must be provided by environment variables - we cannot check them in.
adfs.client_id = ${?ADFS_CLIENT_ID}
adfs.secret = ${?ADFS_SECRET}
adfs.discovery_uri = "https://sts.seattle.gov/adfs/.well-known/openid-configuration"
adfs.discovery_uri = ${?ADFS_DISCOVERY_URI}
adfs.admin_group = "ad\\ITD_CiviForm_Admins_Test"
adfs.admin_group = ${?ADFS_GLOBAL_ADMIN_GROUP}
# Additional Scopes should be space separated values.
adfs.additional_scopes = "allatclaims"
adfs.additional_scopes = ${?ADFS_ADDITIONAL_SCOPES}
adfs.ad_groups_attribute_name = "group"
adfs.ad_groups_attribute_name = ${?AD_GROUPS_ATTRIBUTE_NAME}
