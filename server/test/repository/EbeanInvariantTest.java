package repository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import io.ebean.DB;
import io.ebean.Database;
import io.ebean.Transaction;
import io.ebean.TxScope;
import io.ebean.annotation.TxIsolation;
import java.util.Locale;
import models.QuestionModel;
import org.junit.Before;
import org.junit.Test;
import services.LocalizedStrings;
import services.question.types.QuestionDefinition;
import services.question.types.QuestionDefinitionConfig;
import services.question.types.TextQuestionDefinition;

/**
 * Ebean documentation is unfortunately sparse without a lot of practical examples.
 *
 * <p>The following serves as documentation and verification of believed invariants in how Ebean
 * actually operates, and possibly serves as a guard for changes in future Ebean releases.
 */
public class EbeanInvariantTest extends ResetPostgres {

  private static final QuestionDefinition QUESTION_DEFINITION =
      new TextQuestionDefinition(
          QuestionDefinitionConfig.builder()
              .setName("question")
              .setDescription("applicant's name")
              .setQuestionText(LocalizedStrings.of(Locale.US, "What is your name?"))
              .setQuestionHelpText(LocalizedStrings.empty())
              .build());

  private Database database;

  @Before
  public void setup() {
    database = DB.getDefault();
  }

  /*  Auto generated ID tests.
   *
   * When a new Model is added to the database, auto generated IDs are created
   * and set on the object automatically.
   *
   * The exception to this is for Batch queries where they are not, because the
   * insert has most likely not been sent to the DB which generates the IDs.
   */

  @Test
  public void autoGeneratedIds_areAutoSetOnObjects_save() {
    QuestionModel questionModel = new QuestionModel(QUESTION_DEFINITION);
    assertNull(questionModel.id);

    questionModel.save();

    assertNotNull(questionModel.id);
    assertThat(questionModel.id).isGreaterThan(-1);
  }

  @Test
  public void autoGeneratedIds_areAutoSetOnObjects_insert() {
    QuestionModel questionModel = new QuestionModel(QUESTION_DEFINITION);
    assertNull(questionModel.id);

    questionModel.insert();

    assertNotNull(questionModel.id);
    assertThat(questionModel.id).isGreaterThan(-1);
  }

  /* Note that we're not calling Transaction.commit() through the Transaction
  cases, partially because it's not needed for these tests, as well it
  illustrates what's true without a commit(). */

  @Test
  public void autoGeneratedIds_areAutoSetOnObjects_withTransaction() {
    try (Transaction ignore =
        database.beginTransaction(TxScope.required().setIsolation(TxIsolation.SERIALIZABLE))) {
      QuestionModel questionModel = new QuestionModel(QUESTION_DEFINITION);
      assertNull(questionModel.id);

      questionModel.save();

      assertNotNull(questionModel.id);
      assertThat(questionModel.id).isGreaterThan(-1);
    }
  }

  @Test
  public void autoGeneratedIds_areNotAutoSetOnObjects_withBatchTransaction_mustRefresh() {
    try (Transaction transaction =
        database.beginTransaction(TxScope.required().setIsolation(TxIsolation.SERIALIZABLE))) {
      transaction.setBatchMode(true);
      QuestionModel questionModel = new QuestionModel(QUESTION_DEFINITION);
      assertNull(questionModel.id);

      questionModel.save();

      // ID is NOT set because the save is queued in the server.
      assertNull(questionModel.id);

      // Must refresh to get the ID.
      // Does a select statement for the ID which Ebean seems to know already,
      // this should update M2M properties too.
      questionModel.refresh();

      assertNotNull(questionModel.id);
      assertThat(questionModel.id).isGreaterThan(-1);
    }
  }

  @Test
  public void autoGeneratedIds_areNotAutoSetOnObjects_withBatchTransaction_canFlush() {
    try (Transaction transaction =
        database.beginTransaction(TxScope.required().setIsolation(TxIsolation.SERIALIZABLE))) {
      transaction.setBatchMode(true);
      QuestionModel questionModel = new QuestionModel(QUESTION_DEFINITION);
      assertNull(questionModel.id);

      questionModel.save();

      // ID is NOT set because the save is queued in the server.
      assertNull(questionModel.id);

      // Flushing sends the batch to the DB prematurely.
      // Needing to flush in a batch may indicate a data flow smell, but is
      // possible still better than not batching.
      // This does no additional select, Ebean already knows the ID, note
      // that other information like M2M relations are likely not updated
      // which refresh() does.
      // transaction.commit() is identical to flush it seems.
      questionModel.flush();

      // ID is now set.
      assertNotNull(questionModel.id);
      assertThat(questionModel.id).isGreaterThan(-1);
    }
  }
}
