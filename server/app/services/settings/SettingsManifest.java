/**
 * DO NOT EDIT THIS FILE DIRECTLY
 *
 * <p>This file is generated based on server/conf/env_var_docs.json
 *
 * <p>To update it, run bin/generate-settings-manifest
 */
package services.settings;

import static com.google.common.base.Preconditions.checkNotNull;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.typesafe.config.Config;
import java.util.Optional;
import java.util.regex.Pattern;
import javax.inject.Inject;
import play.mvc.Http.RequestHeader;

/** Data class providing access to server settings. */
public final class SettingsManifest extends AbstractSettingsManifest {

  private final ImmutableMap<String, SettingsSection> settingsSections;

  @Inject
  public SettingsManifest(Config config) {
    super(config);
    this.settingsSections = GENERATED_SECTIONS;
  }

  @VisibleForTesting
  public SettingsManifest(ImmutableMap<String, SettingsSection> settingsSections, Config config) {
    super(config);
    this.settingsSections = checkNotNull(settingsSections);
  }

  /** A map of setting section names to {@link SettingsSection}s. */
  @Override
  public ImmutableMap<String, SettingsSection> getSections() {
    return settingsSections;
  }

  /** Small logo for the civic entity used on the login page. */
  public Optional<String> getCivicEntitySmallLogoUrl() {
    return getString("CIVIC_ENTITY_SMALL_LOGO_URL");
  }

  /** The short display name of the civic entity, will use 'TestCity' if not set. */
  public Optional<String> getWhitelabelCivicEntityShortName(RequestHeader request) {
    return getString("WHITELABEL_CIVIC_ENTITY_SHORT_NAME", request);
  }

  /** The full display name of the civic entity, will use 'City of TestCity' if not set. */
  public Optional<String> getWhitelabelCivicEntityFullName(RequestHeader request) {
    return getString("WHITELABEL_CIVIC_ENTITY_FULL_NAME", request);
  }

  /**
   * The URL of a 32x32 or 16x16 pixel
   * [favicon](https://developer.mozilla.org/en-US/docs/Glossary/Favicon) image, in GIF, PNG, or ICO
   * format.
   */
  public Optional<String> getFaviconUrl() {
    return getString("FAVICON_URL");
  }

  /** What identity provider to use for applicants. */
  public Optional<String> getCiviformApplicantIdp() {
    return getString("CIVIFORM_APPLICANT_IDP");
  }

  /** URI to create a new account in the applicant identity provider. */
  public Optional<String> getApplicantRegisterUri() {
    return getString("APPLICANT_REGISTER_URI");
  }

  /**
   * The name of the portal that applicants log into, used in sentences like 'Log into your
   * APPLICANT_PORTAL_NAME account.'
   */
  public Optional<String> getApplicantPortalName(RequestHeader request) {
    return getString("APPLICANT_PORTAL_NAME", request);
  }

  /**
   * An opaque public identifier for apps that use OIDC (OpenID Connect) to request data from
   * authorization servers, specifically communicating with IDCS. A Civiform instance is always the
   * client.
   */
  public Optional<String> getIdcsClientId() {
    return getString("IDCS_CLIENT_ID");
  }

  /**
   * A secret known only to the client (Civiform) and authorization server, specifically for IDCS
   * OIDC systems. This secret essentially acts as the client’s “password” for accessing data from
   * the auth server.
   */
  public Optional<String> getIdcsSecret() {
    return getString("IDCS_SECRET");
  }

  /**
   * A URL that returns a JSON listing of OIDC (OpenID Connect) data associated with the IDCS auth
   * provider.
   */
  public Optional<String> getIdcsDiscoveryUri() {
    return getString("IDCS_DISCOVERY_URI");
  }

  /** The API key used to interact with LoginRadius. */
  public Optional<String> getLoginRadiusApiKey() {
    return getString("LOGIN_RADIUS_API_KEY");
  }

  /** The base URL to construct SAML endpoints, based on the SAML2 spec. */
  public Optional<String> getLoginRadiusMetadataUri() {
    return getString("LOGIN_RADIUS_METADATA_URI");
  }

  /** The name for the app, based on the SAML2 spec. */
  public Optional<String> getLoginRadiusSamlAppName() {
    return getString("LOGIN_RADIUS_SAML_APP_NAME");
  }

  /**
   * Name of the SAML2 keystore, used to store digital certificates and private keys for SAML auth.
   */
  public Optional<String> getLoginRadiusKeystoreName() {
    return getString("LOGIN_RADIUS_KEYSTORE_NAME");
  }

  /** The password used the protect the integrity of the SAML keystore file. */
  public Optional<String> getLoginRadiusKeystorePass() {
    return getString("LOGIN_RADIUS_KEYSTORE_PASS");
  }

  /** The password used to protect the private key of the SAML digital certificate. */
  public Optional<String> getLoginRadiusPrivateKeyPass() {
    return getString("LOGIN_RADIUS_PRIVATE_KEY_PASS");
  }

  /**
   * Enables [central
   * logout](https://github.com/civiform/civiform/wiki/Authentication-Providers#logout-2).
   */
  public boolean getApplicantOidcProviderLogout() {
    return getBool("APPLICANT_OIDC_PROVIDER_LOGOUT");
  }

  /**
   * By default the 'end_session_endpoint' from the auth provider discovery metadata file is used as
   * the logout endpoint. However for some integrations that standard flow might not work and we
   * need to override logout URL.
   */
  public Optional<String> getApplicantOidcOverrideLogoutUrl() {
    return getString("APPLICANT_OIDC_OVERRIDE_LOGOUT_URL");
  }

  /**
   * URL param used to pass the post logout redirect url in the logout request to the auth provider.
   * It defaults to 'post_logout_redirect_uri' if this variable is unset. If this variable is set to
   * the empty string, the post logout redirect url is not passed at all and instead it needs to be
   * hardcoded on the the auth provider (otherwise the user won't be redirected back to civiform
   * after logout).
   */
  public Optional<String> getApplicantOidcPostLogoutRedirectParam() {
    return getString("APPLICANT_OIDC_POST_LOGOUT_REDIRECT_PARAM");
  }

  /**
   * The name of the OIDC (OpenID Connect) auth provider (server), such as “Auth0” or “LoginRadius”.
   */
  public Optional<String> getApplicantOidcProviderName() {
    return getString("APPLICANT_OIDC_PROVIDER_NAME");
  }

  /**
   * An opaque public identifier for apps that use OIDC (OpenID Connect) to request data from
   * authorization servers. A Civiform instance is always the client.
   */
  public Optional<String> getApplicantOidcClientId() {
    return getString("APPLICANT_OIDC_CLIENT_ID");
  }

  /**
   * A secret known only to the client (Civiform) and authorization server. This secret essentially
   * acts as the client’s “password” for accessing data from the auth server.
   */
  public Optional<String> getApplicantOidcClientSecret() {
    return getString("APPLICANT_OIDC_CLIENT_SECRET");
  }

  /**
   * A URL that returns a JSON listing of OIDC (OpenID Connect) data associated with a given auth
   * provider.
   */
  public Optional<String> getApplicantOidcDiscoveryUri() {
    return getString("APPLICANT_OIDC_DISCOVERY_URI");
  }

  /**
   * Informs the auth server of the desired auth processing flow, based on the OpenID Connect spec.
   */
  public Optional<String> getApplicantOidcResponseMode() {
    return getString("APPLICANT_OIDC_RESPONSE_MODE");
  }

  /**
   * Informs the auth server of the mechanism to be used for returning response params from the auth
   * endpoint, based on the OpenID Connect spec.
   */
  public Optional<String> getApplicantOidcResponseType() {
    return getString("APPLICANT_OIDC_RESPONSE_TYPE");
  }

  /**
   * Scopes the client (CiviForm) is requesting in addition to the standard scopes the OpenID
   * Connect spec provides.
   */
  public Optional<String> getApplicantOidcAdditionalScopes() {
    return getString("APPLICANT_OIDC_ADDITIONAL_SCOPES");
  }

  /** The locale of the user, such as “en-US”. */
  public Optional<String> getApplicantOidcLocaleAttribute() {
    return getString("APPLICANT_OIDC_LOCALE_ATTRIBUTE");
  }

  /** The OIDC attribute name for the user’s email address. */
  public Optional<String> getApplicantOidcEmailAttribute() {
    return getString("APPLICANT_OIDC_EMAIL_ATTRIBUTE");
  }

  /** The OIDC attribute name for the user’s first name. */
  public Optional<String> getApplicantOidcFirstNameAttribute() {
    return getString("APPLICANT_OIDC_FIRST_NAME_ATTRIBUTE");
  }

  /** The OIDC attribute name for the user’s middle name. */
  public Optional<String> getApplicantOidcMiddleNameAttribute() {
    return getString("APPLICANT_OIDC_MIDDLE_NAME_ATTRIBUTE");
  }

  /** The OIDC attribute name for the user’s last name. */
  public Optional<String> getApplicantOidcLastNameAttribute() {
    return getString("APPLICANT_OIDC_LAST_NAME_ATTRIBUTE");
  }

  /**
   * An opaque public identifier for apps that use OIDC (OpenID Connect) to request data from
   * authorization servers, specifically communicating with Login.gov. A Civiform instance is always
   * the client.
   */
  public Optional<String> getLoginGovClientId() {
    return getString("LOGIN_GOV_CLIENT_ID");
  }

  /**
   * A URL that returns a JSON listing of OIDC (OpenID Connect) data associated with a given auth
   * provider, specifically for Login.gov.
   */
  public Optional<String> getLoginGovDiscoveryUri() {
    return getString("LOGIN_GOV_DISCOVERY_URI");
  }

  /**
   * Scopes the client (CiviForm) is requesting in addition to the standard scopes the OpenID
   * Connect spec provides. Scopes should be separated by a space.
   */
  public Optional<String> getLoginGovAdditionalScopes() {
    return getString("LOGIN_GOV_ADDITIONAL_SCOPES");
  }

  /**
   * [Authentication Context Class Reference
   * requests](https://developers.login.gov/oidc/#request-parameters). ial/1 is for open
   * registration, email only. ial/2 is for requiring identity verification.
   */
  public Optional<String> getLoginGovAcrValue() {
    return getString("LOGIN_GOV_ACR_VALUE");
  }

  /** What identity provider to use for admins. */
  public Optional<String> getCiviformAdminIdp() {
    return getString("CIVIFORM_ADMIN_IDP");
  }

  /**
   * An opaque public identifier for apps that use OIDC (OpenID Connect) to request data from
   * authorization servers, specifically communicating with ADFS. A Civiform instance is always the
   * client.
   */
  public Optional<String> getAdfsClientId() {
    return getString("ADFS_CLIENT_ID");
  }

  /**
   * A secret known only to the client (Civiform) and authorization server. This secret essentially
   * acts as the client’s “password” for accessing data from the auth server.
   */
  public Optional<String> getAdfsSecret() {
    return getString("ADFS_SECRET");
  }

  /**
   * A URL that returns a JSON listing of OIDC (OpenID Connect) data associated with the IDCS auth
   * provider.
   */
  public Optional<String> getAdfsDiscoveryUri() {
    return getString("ADFS_DISCOVERY_URI");
  }

  /**
   * The name of the admin group in Active Directory, typically used to tell if a user is a global
   * admin.
   */
  public Optional<String> getAdfsAdminGroup() {
    return getString("ADFS_ADMIN_GROUP");
  }

  /**
   * Scopes the client (CiviForm) is requesting in addition to the standard scopes the OpenID
   * Connect spec provides. Scopes should be separated by a space.
   */
  public Optional<String> getAdfsAdditionalScopes() {
    return getString("ADFS_ADDITIONAL_SCOPES");
  }

  /** The attribute name for looking up the groups associated with a particular user. */
  public Optional<String> getAdGroupsAttributeName() {
    return getString("AD_GROUPS_ATTRIBUTE_NAME");
  }

  /** The name of the OIDC (OpenID Connect) auth provider (server), such as 'Auth0' or 'Okta'. */
  public Optional<String> getAdminOidcProviderName() {
    return getString("ADMIN_OIDC_PROVIDER_NAME");
  }

  /**
   * An opaque public identifier for apps that use OIDC (OpenID Connect) to request data from
   * authorization servers. A Civiform instance is always the client.
   */
  public Optional<String> getAdminOidcClientId() {
    return getString("ADMIN_OIDC_CLIENT_ID");
  }

  /**
   * A secret known only to the client (Civiform) and authorization server. This secret essentially
   * acts as the client’s “password” for accessing data from the auth server.
   */
  public Optional<String> getAdminOidcClientSecret() {
    return getString("ADMIN_OIDC_CLIENT_SECRET");
  }

  /**
   * A URL that returns a JSON listing of OIDC (OpenID Connect) data associated with a given auth
   * provider.
   */
  public Optional<String> getAdminOidcDiscoveryUri() {
    return getString("ADMIN_OIDC_DISCOVERY_URI");
  }

  /**
   * Informs the auth server of the desired auth processing flow, based on the OpenID Connect spec.
   */
  public Optional<String> getAdminOidcResponseMode() {
    return getString("ADMIN_OIDC_RESPONSE_MODE");
  }

  /**
   * Informs the auth server of the mechanism to be used for returning response params from the auth
   * endpoint, based on the OpenID Connect spec.
   */
  public Optional<String> getAdminOidcResponseType() {
    return getString("ADMIN_OIDC_RESPONSE_TYPE");
  }

  /** OIDC client should provide CSRF protection. */
  public boolean getAdminOidcUseCsrf() {
    return getBool("ADMIN_OIDC_USE_CSRF");
  }

  /** Name of attribute that provides the groups associated with an account. */
  public Optional<String> getAdminOidcIdGroupsAttributeName() {
    return getString("ADMIN_OIDC_ID_GROUPS_ATTRIBUTE_NAME");
  }

  /** Name of group that indicates an account is a global admin. */
  public Optional<String> getAdminOidcAdminGroupName() {
    return getString("ADMIN_OIDC_ADMIN_GROUP_NAME");
  }

  /**
   * Scopes the client (CiviForm) is requesting in addition to the standard scopes the OpenID
   * Connect spec provides.
   */
  public Optional<String> getAdminOidcAdditionalScopes() {
    return getString("ADMIN_OIDC_ADDITIONAL_SCOPES");
  }

  /**
   * If enabled, [playframework down
   * evolutions](https://www.playframework.com/documentation/2.8.x/Evolutions#Evolutions-scripts)
   * are automatically applied on server start if needed.
   */
  public boolean getDatabaseApplyDestructiveChanges() {
    return getBool("DATABASE_APPLY_DESTRUCTIVE_CHANGES");
  }

  /** Sets how many connections to the database are maintained. */
  public Optional<Integer> getDatabaseConnectionPoolSize() {
    return getInt("DATABASE_CONNECTION_POOL_SIZE");
  }

  /** The database URL. */
  public Optional<String> getDbJdbcString() {
    return getString("DB_JDBC_STRING");
  }

  /** The username used to connect to the database. */
  public Optional<String> getDbUsername() {
    return getString("DB_USERNAME");
  }

  /** The password used to connect to the database. */
  public Optional<String> getDbPassword() {
    return getString("DB_PASSWORD");
  }

  /**
   * Determines which kind of ExecutorService to use for the default dispatcher. The default is
   * 'fork-join-executor'
   */
  public Optional<String> getAkkaDefaultExecutor() {
    return getString("AKKA_DEFAULT_EXECUTOR");
  }

  /**
   * Min number of threads to cap factor-based parallelism number to for the 'fork-join-executor'
   */
  public Optional<Integer> getForkJoinParallelismMin() {
    return getInt("FORK_JOIN_PARALLELISM_MIN");
  }

  /**
   * Max number of threads to cap factor-based parallelism number to for the 'fork-join-executor'
   */
  public Optional<Integer> getForkJoinParallelismMax() {
    return getInt("FORK_JOIN_PARALLELISM_MAX");
  }

  /**
   * The parallelism factor is used to determine thread pool size for the 'fork-join-executor' using
   * the following formula: ceil(available processors * factor). Resulting size is then bounded by
   * the parallelism-min and parallelism-max values.
   */
  public Optional<Integer> getForkJoinParallelismFactor() {
    return getInt("FORK_JOIN_PARALLELISM_FACTOR");
  }

  /**
   * The size of the thread pool for the 'thread-pool-executor' type. If not defined, this will use
   * the
   * [default](https://github.com/akka/akka/blob/main/akka-actor/src/main/resources/reference.conf#L492)
   * core and max pool sizes.
   */
  public Optional<Integer> getThreadPoolExecutorFixedPoolSize() {
    return getInt("THREAD_POOL_EXECUTOR_FIXED_POOL_SIZE");
  }

  /**
   * The number of messages that are processed in a batch before the thread is returned to the pool.
   * Set to 1 for as fair as possible.
   */
  public Optional<Integer> getAkkaThroughput() {
    return getInt("AKKA_THROUGHPUT");
  }

  /**
   * Region where the AWS SES service exists. If STORAGE_SERVICE_NAME is set to 'aws', it is also
   * the region where the AWS s3 service exists.
   */
  public Optional<String> getAwsRegion() {
    return getString("AWS_REGION");
  }

  /** The email address used for the 'from' email header for emails sent by CiviForm. */
  public Optional<String> getSenderEmailAddress() {
    return getString("SENDER_EMAIL_ADDRESS");
  }

  /** What static file storage provider to use. */
  public Optional<String> getStorageServiceName() {
    return getString("STORAGE_SERVICE_NAME");
  }

  /** s3 bucket to store files in. */
  public Optional<String> getAwsS3BucketName() {
    return getString("AWS_S3_BUCKET_NAME");
  }

  /** The max size (in Mb) of files uploaded to s3. */
  public Optional<String> getAwsS3FileLimitMb() {
    return getString("AWS_S3_FILE_LIMIT_MB");
  }

  /** The azure account name where the blob storage service exists. */
  public Optional<String> getAzureStorageAccountName() {
    return getString("AZURE_STORAGE_ACCOUNT_NAME");
  }

  /** Azure blob storage container name to store files in. */
  public Optional<String> getAzureStorageAccountContainer() {
    return getString("AZURE_STORAGE_ACCOUNT_CONTAINER");
  }

  /**
   * Allows local [Azurite
   * emulator](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite) to be
   * used for developer deployments.
   */
  public Optional<String> getAzureLocalConnectionString() {
    return getString("AZURE_LOCAL_CONNECTION_STRING");
  }

  /**
   * The URL CiviForm will use to call Esri’s [findAddressCandidates
   * service](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-find-address-candidates.htm).
   */
  public Optional<String> getEsriFindAddressCandidatesUrl() {
    return getString("ESRI_FIND_ADDRESS_CANDIDATES_URL");
  }

  /**
   * Human readable labels used to present the service area validation options in CiviForm’s admin
   * UI.
   */
  public Optional<ImmutableList<String>> getEsriAddressServiceAreaValidationLabels() {
    return getListOfStrings("ESRI_ADDRESS_SERVICE_AREA_VALIDATION_LABELS");
  }

  /** The value CiviForm uses to validate if an address is in a service area. */
  public Optional<ImmutableList<String>> getEsriAddressServiceAreaValidationIds() {
    return getListOfStrings("ESRI_ADDRESS_SERVICE_AREA_VALIDATION_IDS");
  }

  /**
   * The URL CiviForm will use to call Esri’s [map query
   * service](https://developers.arcgis.com/rest/services-reference/enterprise/query-feature-service-layer-.htm)
   * for service area validation.
   */
  public Optional<ImmutableList<String>> getEsriAddressServiceAreaValidationUrls() {
    return getListOfStrings("ESRI_ADDRESS_SERVICE_AREA_VALIDATION_URLS");
  }

  /**
   * The attribute CiviForm checks from the service area validation response to get the service area
   * validation ID.
   */
  public Optional<ImmutableList<String>> getEsriAddressServiceAreaValidationAttributes() {
    return getListOfStrings("ESRI_ADDRESS_SERVICE_AREA_VALIDATION_ATTRIBUTES");
  }

  /** The number of tries CiviForm will attempt requests to external Esri services. */
  public Optional<Integer> getEsriExternalCallTries() {
    return getInt("ESRI_EXTERNAL_CALL_TRIES");
  }

  /** This email address is listed in the footer for applicants to contact support. */
  public Optional<String> getSupportEmailAddress(RequestHeader request) {
    return getString("SUPPORT_EMAIL_ADDRESS", request);
  }

  /** This email address receives error notifications from CiviForm when things break. */
  public Optional<String> getItEmailAddress(RequestHeader request) {
    return getString("IT_EMAIL_ADDRESS", request);
  }

  /**
   * If this is a staging deployment, the application notification email is sent to this email
   * address instead of the program administrator's email address.
   */
  public Optional<String> getStagingProgramAdminNotificationMailingList() {
    return getString("STAGING_PROGRAM_ADMIN_NOTIFICATION_MAILING_LIST");
  }

  /**
   * If this is a staging deployment, the application notification email is sent to this email
   * address instead of the trusted intermediary's email address.
   */
  public Optional<String> getStagingTiNotificationMailingList() {
    return getString("STAGING_TI_NOTIFICATION_MAILING_LIST");
  }

  /**
   * If this is a staging deployment, the application notification email is sent to this email
   * address instead of the applicant's email address.
   */
  public Optional<String> getStagingApplicantNotificationMailingList() {
    return getString("STAGING_APPLICANT_NOTIFICATION_MAILING_LIST");
  }

  /**
   * The text for a link on the Common Intake confirmation page that links to more resources. Shown
   * when the applicant is not eligible for any programs in CiviForm.
   */
  public Optional<String> getCommonIntakeMoreResourcesLinkText(RequestHeader request) {
    return getString("COMMON_INTAKE_MORE_RESOURCES_LINK_TEXT", request);
  }

  /**
   * The HREF for a link on the Common Intake confirmation page that links to more resources. Shown
   * when the applicant is not eligible for any programs in CiviForm.
   */
  public Optional<String> getCommonIntakeMoreResourcesLinkHref(RequestHeader request) {
    return getString("COMMON_INTAKE_MORE_RESOURCES_LINK_HREF", request);
  }

  /**
   * The [secret key](http://www.playframework.com/documentation/latest/ApplicationSecret) is used
   * to sign Play's session cookie. This must be changed for production.
   */
  public Optional<String> getSecretKey() {
    return getString("SECRET_KEY");
  }

  /** The URL of the CiviForm deployment.  Must start with 'https://' or 'http://'. */
  public Optional<String> getBaseUrl() {
    return getString("BASE_URL");
  }

  /** DNS name of the staging deployment.  Must not start with 'https://' or 'http://'. */
  public Optional<String> getStagingHostname() {
    return getString("STAGING_HOSTNAME");
  }

  /**
   * The languages that applicants can choose from when specifying their language preference and
   * that admins can choose from when adding translations for programs and applications.
   */
  public Optional<ImmutableList<String>> getCiviformSupportedLanguages() {
    return getListOfStrings("CIVIFORM_SUPPORTED_LANGUAGES");
  }

  /**
   * A Java [time zone ID](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)
   * indicating the time zone for this CiviForm deployment. All times in the system will be
   * calculated in this zone. Default value is 'America/Los_Angeles'
   */
  public Optional<String> getCiviformTimeZoneId() {
    return getString("CIVIFORM_TIME_ZONE_ID");
  }

  /**
   * The tag of the docker image this server is running inside. Is added as a HTML meta tag with
   * name 'civiform-build-tag'. If SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE is set to true, is also
   * shown on the login page if CIVIFORM_VERSION is the empty string or set to 'latest'.
   */
  public Optional<String> getCiviformImageTag() {
    return getString("CIVIFORM_IMAGE_TAG");
  }

  /**
   * The release version of CiviForm. For example: v1.18.0. If
   * SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE is set to true, is also shown on the login page if it a
   * value other than the empty string or 'latest'.
   */
  public Optional<String> getCiviformVersion() {
    return getString("CIVIFORM_VERSION");
  }

  /**
   * Where to find the IP address for incoming requests. Default is "DIRECT" where the IP address of
   * the request is the originating IP address. If "FORWARDED" then request has been reverse proxied
   * and the originating IP address is stored in the X-Forwarded-For header.
   */
  public Optional<String> getClientIpType() {
    return getString("CLIENT_IP_TYPE");
  }

  /**
   * If enabled, allows server Prometheus metrics to be retrieved via the '/metrics' URL path.  If
   * disabled, '/metrics' returns a 404.
   */
  public boolean getCiviformServerMetricsEnabled() {
    return getBool("CIVIFORM_SERVER_METRICS_ENABLED");
  }

  /**
   * The Google Analytics tracking ID.  If set, Google Analytics JavaScript scripts are added to the
   * CiviForm pages.
   */
  public Optional<String> getMeasurementId() {
    return getString("MEASUREMENT_ID");
  }

  /**
   * A cryptographic [secret salt](https://en.wikipedia.org/wiki/Salt_(cryptography)) used for
   * salting API keys before storing their hash values in the database. This value should be kept
   * strictly secret. If one suspects the secret has been leaked or otherwise comprised it should be
   * changed and all active API keys should be retired and reissued. Default value is 'changeme'.
   */
  public Optional<String> getCiviformApiSecretSalt() {
    return getString("CIVIFORM_API_SECRET_SALT");
  }

  /**
   * When true prevents the CiviForm admin from issuing API keys that allow callers from all IP
   * addresses (i.e. a CIDR mask of /0).
   */
  public boolean getCiviformApiKeysBanGlobalSubnet() {
    return getBool("CIVIFORM_API_KEYS_BAN_GLOBAL_SUBNET");
  }

  /**
   * An integer specifying the maximum number of entries returned in a page of results for the
   * applications export API.
   */
  public Optional<Integer> getCiviformApiApplicationsListMaxPageSize() {
    return getInt("CIVIFORM_API_APPLICATIONS_LIST_MAX_PAGE_SIZE");
  }

  /**
   * An integer specifying the polling interval in seconds for the durable job system. A smaller
   * number here increases the polling frequency, which results in jobs running sooner when they are
   * scheduled to be run immediately, at the cost of more pressure on the database. Default value is
   * 5.
   */
  public Optional<Integer> getDurableJobsPollIntervalSeconds() {
    return getInt("DURABLE_JOBS_POLL_INTERVAL_SECONDS");
  }

  /**
   * An integer specifying the timeout in minutes for durable jobs i.e. how long a single job is
   * allowed to run before the system attempts to interrupt it. Default value is 30.
   */
  public Optional<Integer> getDurableJobsJobTimeoutMinutes() {
    return getInt("DURABLE_JOBS_JOB_TIMEOUT_MINUTES");
  }

  /**
   * The number of server threads available for the durable job runner. More than a single thread
   * will the server execute multiple jobs in parallel. Default value is 1.
   */
  public Optional<Integer> getDurableJobsThreadPoolSize() {
    return getInt("DURABLE_JOBS_THREAD_POOL_SIZE");
  }

  /**
   * Enables the feature that allows for service area validation of a corrected address.
   * ESRI_ADDRESS_CORRECTION_ENABLED needs to be enabled.
   */
  public boolean getEsriAddressServiceAreaValidationEnabled(RequestHeader request) {
    return getBool("ESRI_ADDRESS_SERVICE_AREA_VALIDATION_ENABLED", request);
  }

  /** Enables the feature that allows address correction for address questions. */
  public boolean getEsriAddressCorrectionEnabled(RequestHeader request) {
    return getBool("ESRI_ADDRESS_CORRECTION_ENABLED", request);
  }

  /** If enabled, allows questions to be optional in programs. Is enabled by default. */
  public boolean getCfOptionalQuestions(RequestHeader request) {
    return getBool("CF_OPTIONAL_QUESTIONS", request);
  }

  /**
   * If enabled, CiviForm Admins are able to see all applications for all programs. Is disabled by
   * default.
   */
  public boolean getAllowCiviformAdminAccessPrograms(RequestHeader request) {
    return getBool("ALLOW_CIVIFORM_ADMIN_ACCESS_PROGRAMS", request);
  }

  /**
   * If enabled, the value of CIVIFORM_IMAGE_TAG will be shown on the login screen. Is disabled by
   * default.
   */
  public boolean getShowCiviformImageTagOnLandingPage(RequestHeader request) {
    return getBool("SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE", request);
  }

  /** Enables the Common Intake Form feature. */
  public boolean getIntakeFormEnabled(RequestHeader request) {
    return getBool("INTAKE_FORM_ENABLED", request);
  }

  /**
   * If this is a staging deployment and this variable is set to true, a [robots
   * noindex](https://developers.google.com/search/docs/crawling-indexing/robots-meta-tag) metadata
   * tag is added to the CiviForm pages. This causes the staging site to not be listed on search
   * engines.
   */
  public boolean getStagingAddNoindexMetaTag() {
    return getBool("STAGING_ADD_NOINDEX_META_TAG");
  }

  /**
   * If this is a staging deployment and this variable is set to true, the 'DEMO MODE. LOGIN AS:'
   * buttons are not shown on the login page.
   */
  public boolean getStagingDisableDemoModeLogins() {
    return getBool("STAGING_DISABLE_DEMO_MODE_LOGINS");
  }

  /** Enables the API docs tab on CiviForm. */
  public boolean getApiGeneratedDocsEnabled(RequestHeader request) {
    return getBool("API_GENERATED_DOCS_ENABLED", request);
  }

  private static final ImmutableMap<String, SettingsSection> GENERATED_SECTIONS =
      ImmutableMap.of(
          "Branding",
          SettingsSection.create(
              "Branding",
              "Configuration options for CiviForm branding.",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "CIVIC_ENTITY_SMALL_LOGO_URL",
                      "Small logo for the civic entity used on the login page.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE),
                  SettingDescription.create(
                      "WHITELABEL_CIVIC_ENTITY_SHORT_NAME",
                      "The short display name of the civic entity, will use 'TestCity' if not set.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "WHITELABEL_CIVIC_ENTITY_FULL_NAME",
                      "The full display name of the civic entity, will use 'City of TestCity' if"
                          + " not set.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "FAVICON_URL",
                      "The URL of a 32x32 or 16x16 pixel"
                          + " [favicon](https://developer.mozilla.org/en-US/docs/Glossary/Favicon)"
                          + " image, in GIF, PNG, or ICO format.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE))),
          "External Services",
          SettingsSection.create(
              "External Services",
              "Configures connections to external services the CiviForm server relies on.",
              ImmutableList.of(
                  SettingsSection.create(
                      "Applicant Identity Provider",
                      "Configuration options for the [applicant identity"
                          + " provider](https://github.com/civiform/civiform/wiki/Authentication-Providers#applicant-authentication).",
                      ImmutableList.of(
                          SettingsSection.create(
                              "Oracle Identity Cloud Service",
                              "Configuration options for the"
                                  + " [idcs](https://github.com/civiform/civiform/wiki/Authentication-Providers#oracle-idcs)"
                                  + " provider.",
                              ImmutableList.of(),
                              ImmutableList.of(
                                  SettingDescription.create(
                                      "IDCS_CLIENT_ID",
                                      "An opaque public identifier for apps that use OIDC (OpenID"
                                          + " Connect) to request data from authorization servers,"
                                          + " specifically communicating with IDCS. A Civiform"
                                          + " instance is always the client.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.SECRET),
                                  SettingDescription.create(
                                      "IDCS_SECRET",
                                      "A secret known only to the client (Civiform) and"
                                          + " authorization server, specifically for IDCS OIDC"
                                          + " systems. This secret essentially acts as the"
                                          + " client’s “password” for accessing data from the auth"
                                          + " server.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.SECRET),
                                  SettingDescription.create(
                                      "IDCS_DISCOVERY_URI",
                                      "A URL that returns a JSON listing of OIDC (OpenID Connect)"
                                          + " data associated with the IDCS auth provider.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN))),
                          SettingsSection.create(
                              "Login Radius",
                              "Configuration options for the"
                                  + " [login-radius](https://github.com/civiform/civiform/wiki/Authentication-Providers#loginradius-saml)"
                                  + " provider",
                              ImmutableList.of(),
                              ImmutableList.of(
                                  SettingDescription.create(
                                      "LOGIN_RADIUS_API_KEY",
                                      "The API key used to interact with LoginRadius.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_RADIUS_METADATA_URI",
                                      "The base URL to construct SAML endpoints, based on the"
                                          + " SAML2 spec.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_RADIUS_SAML_APP_NAME",
                                      "The name for the app, based on the SAML2 spec.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_RADIUS_KEYSTORE_NAME",
                                      "Name of the SAML2 keystore, used to store digital"
                                          + " certificates and private keys for SAML auth.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_RADIUS_KEYSTORE_PASS",
                                      "The password used the protect the integrity of the SAML"
                                          + " keystore file.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_RADIUS_PRIVATE_KEY_PASS",
                                      "The password used to protect the private key of the SAML"
                                          + " digital certificate.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN))),
                          SettingsSection.create(
                              "OpenID Connect",
                              "Configuration options for the"
                                  + " [generic-oidc](https://github.com/civiform/civiform/wiki/Authentication-Providers#generic-oidc-oidc)"
                                  + " provider.",
                              ImmutableList.of(),
                              ImmutableList.of(
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_PROVIDER_LOGOUT",
                                      "Enables [central"
                                          + " logout](https://github.com/civiform/civiform/wiki/Authentication-Providers#logout-2).",
                                      /* isRequired= */ false,
                                      SettingType.BOOLEAN,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_OVERRIDE_LOGOUT_URL",
                                      "By default the 'end_session_endpoint' from the auth"
                                          + " provider discovery metadata file is used as the"
                                          + " logout endpoint. However for some integrations that"
                                          + " standard flow might not work and we need to override"
                                          + " logout URL.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_POST_LOGOUT_REDIRECT_PARAM",
                                      "URL param used to pass the post logout redirect url in the"
                                          + " logout request to the auth provider. It defaults to"
                                          + " 'post_logout_redirect_uri' if this variable is"
                                          + " unset. If this variable is set to the empty string,"
                                          + " the post logout redirect url is not passed at all"
                                          + " and instead it needs to be hardcoded on the the auth"
                                          + " provider (otherwise the user won't be redirected"
                                          + " back to civiform after logout).",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_PROVIDER_NAME",
                                      "The name of the OIDC (OpenID Connect) auth provider"
                                          + " (server), such as “Auth0” or “LoginRadius”.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_CLIENT_ID",
                                      "An opaque public identifier for apps that use OIDC (OpenID"
                                          + " Connect) to request data from authorization servers."
                                          + " A Civiform instance is always the client.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_CLIENT_SECRET",
                                      "A secret known only to the client (Civiform) and"
                                          + " authorization server. This secret essentially acts"
                                          + " as the client’s “password” for accessing data from"
                                          + " the auth server.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.SECRET),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_DISCOVERY_URI",
                                      "A URL that returns a JSON listing of OIDC (OpenID Connect)"
                                          + " data associated with a given auth provider.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_RESPONSE_MODE",
                                      "Informs the auth server of the desired auth processing"
                                          + " flow, based on the OpenID Connect spec.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_RESPONSE_TYPE",
                                      "Informs the auth server of the mechanism to be used for"
                                          + " returning response params from the auth endpoint,"
                                          + " based on the OpenID Connect spec.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_ADDITIONAL_SCOPES",
                                      "Scopes the client (CiviForm) is requesting in addition to"
                                          + " the standard scopes the OpenID Connect spec"
                                          + " provides.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_LOCALE_ATTRIBUTE",
                                      "The locale of the user, such as “en-US”.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_EMAIL_ATTRIBUTE",
                                      "The OIDC attribute name for the user’s email address.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_FIRST_NAME_ATTRIBUTE",
                                      "The OIDC attribute name for the user’s first name.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_MIDDLE_NAME_ATTRIBUTE",
                                      "The OIDC attribute name for the user’s middle name.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "APPLICANT_OIDC_LAST_NAME_ATTRIBUTE",
                                      "The OIDC attribute name for the user’s last name.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN))),
                          SettingsSection.create(
                              "Login.gov",
                              "Configuration options for the"
                                  + " [login-gov](https://github.com/civiform/civiform/wiki/Authentication-Providers#logingov-oidc)"
                                  + " provider",
                              ImmutableList.of(),
                              ImmutableList.of(
                                  SettingDescription.create(
                                      "LOGIN_GOV_CLIENT_ID",
                                      "An opaque public identifier for apps that use OIDC (OpenID"
                                          + " Connect) to request data from authorization servers,"
                                          + " specifically communicating with Login.gov. A"
                                          + " Civiform instance is always the client.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_GOV_DISCOVERY_URI",
                                      "A URL that returns a JSON listing of OIDC (OpenID Connect)"
                                          + " data associated with a given auth provider,"
                                          + " specifically for Login.gov.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_GOV_ADDITIONAL_SCOPES",
                                      "Scopes the client (CiviForm) is requesting in addition to"
                                          + " the standard scopes the OpenID Connect spec"
                                          + " provides. Scopes should be separated by a space.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "LOGIN_GOV_ACR_VALUE",
                                      "[Authentication Context Class Reference"
                                          + " requests](https://developers.login.gov/oidc/#request-parameters)."
                                          + " ial/1 is for open registration, email only. ial/2 is"
                                          + " for requiring identity verification.",
                                      /* isRequired= */ false,
                                      SettingType.ENUM,
                                      SettingMode.HIDDEN,
                                      ImmutableList.of(
                                          "http://idmanagement.gov/ns/assurance/ial/1",
                                          "http://idmanagement.gov/ns/assurance/ial/2"))))),
                      ImmutableList.of(
                          SettingDescription.create(
                              "CIVIFORM_APPLICANT_IDP",
                              "What identity provider to use for applicants.",
                              /* isRequired= */ true,
                              SettingType.ENUM,
                              SettingMode.ADMIN_READABLE,
                              ImmutableList.of(
                                  "idcs",
                                  "login-radius",
                                  "generic-oidc",
                                  "login-gov",
                                  "auth0",
                                  "disabled")),
                          SettingDescription.create(
                              "APPLICANT_REGISTER_URI",
                              "URI to create a new account in the applicant identity provider.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.ADMIN_READABLE),
                          SettingDescription.create(
                              "APPLICANT_PORTAL_NAME",
                              "The name of the portal that applicants log into, used in sentences"
                                  + " like 'Log into your APPLICANT_PORTAL_NAME account.'",
                              /* isRequired= */ true,
                              SettingType.STRING,
                              SettingMode.ADMIN_WRITEABLE))),
                  SettingsSection.create(
                      "Administrator Identity Provider",
                      "Configuration options for the [administrator identity"
                          + " provider](https://github.com/civiform/civiform/wiki/Authentication-Providers#admin-authentication).",
                      ImmutableList.of(
                          SettingsSection.create(
                              "Active Directory Federation Services",
                              "Configuration options for the"
                                  + " [ADFS](https://docs.civiform.us/contributor-guide/developer-guide/authentication-providers#azure-a-d-and-adfs-oidc)"
                                  + " provider.",
                              ImmutableList.of(),
                              ImmutableList.of(
                                  SettingDescription.create(
                                      "ADFS_CLIENT_ID",
                                      "An opaque public identifier for apps that use OIDC (OpenID"
                                          + " Connect) to request data from authorization servers,"
                                          + " specifically communicating with ADFS. A Civiform"
                                          + " instance is always the client.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADFS_SECRET",
                                      "A secret known only to the client (Civiform) and"
                                          + " authorization server. This secret essentially acts"
                                          + " as the client’s “password” for accessing data from"
                                          + " the auth server.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.SECRET),
                                  SettingDescription.create(
                                      "ADFS_DISCOVERY_URI",
                                      "A URL that returns a JSON listing of OIDC (OpenID Connect)"
                                          + " data associated with the IDCS auth provider.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADFS_ADMIN_GROUP",
                                      "The name of the admin group in Active Directory, typically"
                                          + " used to tell if a user is a global admin.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADFS_ADDITIONAL_SCOPES",
                                      "Scopes the client (CiviForm) is requesting in addition to"
                                          + " the standard scopes the OpenID Connect spec"
                                          + " provides. Scopes should be separated by a space.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "AD_GROUPS_ATTRIBUTE_NAME",
                                      "The attribute name for looking up the groups associated"
                                          + " with a particular user.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN))),
                          SettingsSection.create(
                              "OpenID Connect",
                              "Configuration options for the"
                                  + " [generic-oidc](https://docs.civiform.us/contributor-guide/developer-guide/authentication-providers#generic-oidc-oidc)"
                                  + " provider.",
                              ImmutableList.of(),
                              ImmutableList.of(
                                  SettingDescription.create(
                                      "ADMIN_OIDC_PROVIDER_NAME",
                                      "The name of the OIDC (OpenID Connect) auth provider"
                                          + " (server), such as 'Auth0' or 'Okta'.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_CLIENT_ID",
                                      "An opaque public identifier for apps that use OIDC (OpenID"
                                          + " Connect) to request data from authorization servers."
                                          + " A Civiform instance is always the client.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_CLIENT_SECRET",
                                      "A secret known only to the client (Civiform) and"
                                          + " authorization server. This secret essentially acts"
                                          + " as the client’s “password” for accessing data from"
                                          + " the auth server.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_DISCOVERY_URI",
                                      "A URL that returns a JSON listing of OIDC (OpenID Connect)"
                                          + " data associated with a given auth provider.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_RESPONSE_MODE",
                                      "Informs the auth server of the desired auth processing"
                                          + " flow, based on the OpenID Connect spec.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_RESPONSE_TYPE",
                                      "Informs the auth server of the mechanism to be used for"
                                          + " returning response params from the auth endpoint,"
                                          + " based on the OpenID Connect spec.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_USE_CSRF",
                                      "OIDC client should provide CSRF protection.",
                                      /* isRequired= */ false,
                                      SettingType.BOOLEAN,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_ID_GROUPS_ATTRIBUTE_NAME",
                                      "Name of attribute that provides the groups associated with"
                                          + " an account.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_ADMIN_GROUP_NAME",
                                      "Name of group that indicates an account is a global admin.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN),
                                  SettingDescription.create(
                                      "ADMIN_OIDC_ADDITIONAL_SCOPES",
                                      "Scopes the client (CiviForm) is requesting in addition to"
                                          + " the standard scopes the OpenID Connect spec"
                                          + " provides.",
                                      /* isRequired= */ false,
                                      SettingType.STRING,
                                      SettingMode.HIDDEN)))),
                      ImmutableList.of(
                          SettingDescription.create(
                              "CIVIFORM_ADMIN_IDP",
                              "What identity provider to use for admins.",
                              /* isRequired= */ false,
                              SettingType.ENUM,
                              SettingMode.ADMIN_READABLE,
                              ImmutableList.of("adfs", "generic-oidc-admin")))),
                  SettingsSection.create(
                      "Database",
                      "Configures the connection to the PostgreSQL database.",
                      ImmutableList.of(),
                      ImmutableList.of(
                          SettingDescription.create(
                              "DATABASE_APPLY_DESTRUCTIVE_CHANGES",
                              "If enabled, [playframework down"
                                  + " evolutions](https://www.playframework.com/documentation/2.8.x/Evolutions#Evolutions-scripts)"
                                  + " are automatically applied on server start if needed.",
                              /* isRequired= */ false,
                              SettingType.BOOLEAN,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "DATABASE_CONNECTION_POOL_SIZE",
                              "Sets how many connections to the database are maintained.",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "DB_JDBC_STRING",
                              "The database URL.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "DB_USERNAME",
                              "The username used to connect to the database.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.SECRET),
                          SettingDescription.create(
                              "DB_PASSWORD",
                              "The password used to connect to the database.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.SECRET))),
                  SettingsSection.create(
                      "Thread pools",
                      "Configures the Play framework [thread"
                          + " pools](https://www.playframework.com/documentation/2.8.x/ThreadPools).",
                      ImmutableList.of(),
                      ImmutableList.of(
                          SettingDescription.create(
                              "AKKA_DEFAULT_EXECUTOR",
                              "Determines which kind of ExecutorService to use for the default"
                                  + " dispatcher. The default is 'fork-join-executor'",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "FORK_JOIN_PARALLELISM_MIN",
                              "Min number of threads to cap factor-based parallelism number to for"
                                  + " the 'fork-join-executor'",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "FORK_JOIN_PARALLELISM_MAX",
                              "Max number of threads to cap factor-based parallelism number to for"
                                  + " the 'fork-join-executor'",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "FORK_JOIN_PARALLELISM_FACTOR",
                              "The parallelism factor is used to determine thread pool size for"
                                  + " the 'fork-join-executor' using the following formula:"
                                  + " ceil(available processors * factor). Resulting size is then"
                                  + " bounded by the parallelism-min and parallelism-max values.",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "THREAD_POOL_EXECUTOR_FIXED_POOL_SIZE",
                              "The size of the thread pool for the 'thread-pool-executor' type. If"
                                  + " not defined, this will use the"
                                  + " [default](https://github.com/akka/akka/blob/main/akka-actor/src/main/resources/reference.conf#L492)"
                                  + " core and max pool sizes.",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "AKKA_THROUGHPUT",
                              "The number of messages that are processed in a batch before the"
                                  + " thread is returned to the pool. Set to 1 for as fair as"
                                  + " possible.",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.HIDDEN))),
                  SettingsSection.create(
                      "Application File Upload Storage",
                      "Configuration options for the application file upload storage provider",
                      ImmutableList.of(),
                      ImmutableList.of(
                          SettingDescription.create(
                              "STORAGE_SERVICE_NAME",
                              "What static file storage provider to use.",
                              /* isRequired= */ false,
                              SettingType.ENUM,
                              SettingMode.HIDDEN,
                              ImmutableList.of("s3", "azure-blob")),
                          SettingDescription.create(
                              "AWS_S3_BUCKET_NAME",
                              "s3 bucket to store files in.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "AWS_S3_FILE_LIMIT_MB",
                              "The max size (in Mb) of files uploaded to s3.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "AZURE_STORAGE_ACCOUNT_NAME",
                              "The azure account name where the blob storage service exists.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "AZURE_STORAGE_ACCOUNT_CONTAINER",
                              "Azure blob storage container name to store files in.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN),
                          SettingDescription.create(
                              "AZURE_LOCAL_CONNECTION_STRING",
                              "Allows local [Azurite"
                                  + " emulator](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite)"
                                  + " to be used for developer deployments.",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.HIDDEN))),
                  SettingsSection.create(
                      "ESRI Address Validation",
                      "Configuration options for the ESRI GIS client and address"
                          + " validation/correction feature.",
                      ImmutableList.of(),
                      ImmutableList.of(
                          SettingDescription.create(
                              "ESRI_FIND_ADDRESS_CANDIDATES_URL",
                              "The URL CiviForm will use to call Esri’s [findAddressCandidates"
                                  + " service](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-find-address-candidates.htm).",
                              /* isRequired= */ false,
                              SettingType.STRING,
                              SettingMode.ADMIN_READABLE),
                          SettingDescription.create(
                              "ESRI_ADDRESS_SERVICE_AREA_VALIDATION_LABELS",
                              "Human readable labels used to present the service area validation"
                                  + " options in CiviForm’s admin UI.",
                              /* isRequired= */ false,
                              SettingType.LIST_OF_STRINGS,
                              SettingMode.ADMIN_READABLE),
                          SettingDescription.create(
                              "ESRI_ADDRESS_SERVICE_AREA_VALIDATION_IDS",
                              "The value CiviForm uses to validate if an address is in a service"
                                  + " area.",
                              /* isRequired= */ false,
                              SettingType.LIST_OF_STRINGS,
                              SettingMode.ADMIN_READABLE),
                          SettingDescription.create(
                              "ESRI_ADDRESS_SERVICE_AREA_VALIDATION_URLS",
                              "The URL CiviForm will use to call Esri’s [map query"
                                  + " service](https://developers.arcgis.com/rest/services-reference/enterprise/query-feature-service-layer-.htm)"
                                  + " for service area validation.",
                              /* isRequired= */ false,
                              SettingType.LIST_OF_STRINGS,
                              SettingMode.ADMIN_READABLE),
                          SettingDescription.create(
                              "ESRI_ADDRESS_SERVICE_AREA_VALIDATION_ATTRIBUTES",
                              "The attribute CiviForm checks from the service area validation"
                                  + " response to get the service area validation ID.",
                              /* isRequired= */ false,
                              SettingType.LIST_OF_STRINGS,
                              SettingMode.ADMIN_READABLE),
                          SettingDescription.create(
                              "ESRI_EXTERNAL_CALL_TRIES",
                              "The number of tries CiviForm will attempt requests to external Esri"
                                  + " services.",
                              /* isRequired= */ false,
                              SettingType.INT,
                              SettingMode.ADMIN_READABLE)))),
              ImmutableList.of(
                  SettingDescription.create(
                      "AWS_REGION",
                      "Region where the AWS SES service exists. If STORAGE_SERVICE_NAME is set to"
                          + " 'aws', it is also the region where the AWS s3 service exists.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "SENDER_EMAIL_ADDRESS",
                      "The email address used for the 'from' email header for emails sent by"
                          + " CiviForm.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.HIDDEN))),
          "Email Addresses",
          SettingsSection.create(
              "Email Addresses",
              "Configuration options for [CiviForm email"
                  + " usage](https://docs.civiform.us/it-manual/sre-playbook/email-configuration).",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "SUPPORT_EMAIL_ADDRESS",
                      "This email address is listed in the footer for applicants to contact"
                          + " support.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "IT_EMAIL_ADDRESS",
                      "This email address receives error notifications from CiviForm when things"
                          + " break.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "STAGING_PROGRAM_ADMIN_NOTIFICATION_MAILING_LIST",
                      "If this is a staging deployment, the application notification email is sent"
                          + " to this email address instead of the program administrator's email"
                          + " address.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "STAGING_TI_NOTIFICATION_MAILING_LIST",
                      "If this is a staging deployment, the application notification email is sent"
                          + " to this email address instead of the trusted intermediary's email"
                          + " address.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "STAGING_APPLICANT_NOTIFICATION_MAILING_LIST",
                      "If this is a staging deployment, the application notification email is sent"
                          + " to this email address instead of the applicant's email address.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.HIDDEN))),
          "Custom Text",
          SettingsSection.create(
              "Custom Text",
              "Text specific to a civic entity.",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "COMMON_INTAKE_MORE_RESOURCES_LINK_TEXT",
                      "The text for a link on the Common Intake confirmation page that links to"
                          + " more resources. Shown when the applicant is not eligible for any"
                          + " programs in CiviForm.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "COMMON_INTAKE_MORE_RESOURCES_LINK_HREF",
                      "The HREF for a link on the Common Intake confirmation page that links to"
                          + " more resources. Shown when the applicant is not eligible for any"
                          + " programs in CiviForm.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_WRITEABLE,
                      Pattern.compile("^(http://|https://).+")))),
          "Observability",
          SettingsSection.create(
              "Observability",
              "Configuration options for CiviForm observability features.",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "CIVIFORM_SERVER_METRICS_ENABLED",
                      "If enabled, allows server Prometheus metrics to be retrieved via the"
                          + " '/metrics' URL path.  If disabled, '/metrics' returns a 404.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_READABLE),
                  SettingDescription.create(
                      "MEASUREMENT_ID",
                      "The Google Analytics tracking ID.  If set, Google Analytics JavaScript"
                          + " scripts are added to the CiviForm pages.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE))),
          "Data Export API",
          SettingsSection.create(
              "Data Export API",
              "Configuration options for the [CiviForm"
                  + " API](https://docs.civiform.us/it-manual/api).",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "CIVIFORM_API_SECRET_SALT",
                      "A cryptographic [secret"
                          + " salt](https://en.wikipedia.org/wiki/Salt_(cryptography)) used for"
                          + " salting API keys before storing their hash values in the database."
                          + " This value should be kept strictly secret. If one suspects the"
                          + " secret has been leaked or otherwise comprised it should be changed"
                          + " and all active API keys should be retired and reissued. Default"
                          + " value is 'changeme'.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.SECRET),
                  SettingDescription.create(
                      "CIVIFORM_API_KEYS_BAN_GLOBAL_SUBNET",
                      "When true prevents the CiviForm admin from issuing API keys that allow"
                          + " callers from all IP addresses (i.e. a CIDR mask of /0).",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "CIVIFORM_API_APPLICATIONS_LIST_MAX_PAGE_SIZE",
                      "An integer specifying the maximum number of entries returned in a page of"
                          + " results for the applications export API.",
                      /* isRequired= */ false,
                      SettingType.INT,
                      SettingMode.ADMIN_READABLE))),
          "Durable Jobs",
          SettingsSection.create(
              "Durable Jobs",
              "Configuration options for the CiviForm Job Runner.",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "DURABLE_JOBS_POLL_INTERVAL_SECONDS",
                      "An integer specifying the polling interval in seconds for the durable job"
                          + " system. A smaller number here increases the polling frequency, which"
                          + " results in jobs running sooner when they are scheduled to be run"
                          + " immediately, at the cost of more pressure on the database. Default"
                          + " value is 5.",
                      /* isRequired= */ false,
                      SettingType.INT,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "DURABLE_JOBS_JOB_TIMEOUT_MINUTES",
                      "An integer specifying the timeout in minutes for durable jobs i.e. how long"
                          + " a single job is allowed to run before the system attempts to"
                          + " interrupt it. Default value is 30.",
                      /* isRequired= */ false,
                      SettingType.INT,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "DURABLE_JOBS_THREAD_POOL_SIZE",
                      "The number of server threads available for the durable job runner. More"
                          + " than a single thread will the server execute multiple jobs in"
                          + " parallel. Default value is 1.",
                      /* isRequired= */ false,
                      SettingType.INT,
                      SettingMode.HIDDEN))),
          "Feature Flags",
          SettingsSection.create(
              "Feature Flags",
              "Configuration options to enable or disable optional or in-development features.",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "ESRI_ADDRESS_SERVICE_AREA_VALIDATION_ENABLED",
                      "Enables the feature that allows for service area validation of a corrected"
                          + " address. ESRI_ADDRESS_CORRECTION_ENABLED needs to be enabled.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "ESRI_ADDRESS_CORRECTION_ENABLED",
                      "Enables the feature that allows address correction for address questions.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "CF_OPTIONAL_QUESTIONS",
                      "If enabled, allows questions to be optional in programs. Is enabled by"
                          + " default.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "ALLOW_CIVIFORM_ADMIN_ACCESS_PROGRAMS",
                      "If enabled, CiviForm Admins are able to see all applications for all"
                          + " programs. Is disabled by default.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE",
                      "If enabled, the value of CIVIFORM_IMAGE_TAG will be shown on the login"
                          + " screen. Is disabled by default.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "INTAKE_FORM_ENABLED",
                      "Enables the Common Intake Form feature.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE),
                  SettingDescription.create(
                      "STAGING_ADD_NOINDEX_META_TAG",
                      "If this is a staging deployment and this variable is set to true, a [robots"
                          + " noindex](https://developers.google.com/search/docs/crawling-indexing/robots-meta-tag)"
                          + " metadata tag is added to the CiviForm pages. This causes the staging"
                          + " site to not be listed on search engines.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "STAGING_DISABLE_DEMO_MODE_LOGINS",
                      "If this is a staging deployment and this variable is set to true, the 'DEMO"
                          + " MODE. LOGIN AS:' buttons are not shown on the login page.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "API_GENERATED_DOCS_ENABLED",
                      "Enables the API docs tab on CiviForm.",
                      /* isRequired= */ false,
                      SettingType.BOOLEAN,
                      SettingMode.ADMIN_WRITEABLE))),
          "Miscellaneous",
          SettingsSection.create(
              "Miscellaneous",
              "Top level vars",
              ImmutableList.of(),
              ImmutableList.of(
                  SettingDescription.create(
                      "SECRET_KEY",
                      "The [secret"
                          + " key](http://www.playframework.com/documentation/latest/ApplicationSecret)"
                          + " is used to sign Play's session cookie. This must be changed for"
                          + " production.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.SECRET),
                  SettingDescription.create(
                      "BASE_URL",
                      "The URL of the CiviForm deployment.  Must start with 'https://' or"
                          + " 'http://'.",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE,
                      Pattern.compile("^(http://|https://).+")),
                  SettingDescription.create(
                      "STAGING_HOSTNAME",
                      "DNS name of the staging deployment.  Must not start with 'https://' or"
                          + " 'http://'.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.HIDDEN,
                      Pattern.compile("^(?!http://|https://).+")),
                  SettingDescription.create(
                      "CIVIFORM_SUPPORTED_LANGUAGES",
                      "The languages that applicants can choose from when specifying their"
                          + " language preference and that admins can choose from when adding"
                          + " translations for programs and applications.",
                      /* isRequired= */ false,
                      SettingType.LIST_OF_STRINGS,
                      SettingMode.HIDDEN),
                  SettingDescription.create(
                      "CIVIFORM_TIME_ZONE_ID",
                      "A Java [time zone"
                          + " ID](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)"
                          + " indicating the time zone for this CiviForm deployment. All times in"
                          + " the system will be calculated in this zone. Default value is"
                          + " 'America/Los_Angeles'",
                      /* isRequired= */ true,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE),
                  SettingDescription.create(
                      "CIVIFORM_IMAGE_TAG",
                      "The tag of the docker image this server is running inside. Is added as a"
                          + " HTML meta tag with name 'civiform-build-tag'. If"
                          + " SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE is set to true, is also"
                          + " shown on the login page if CIVIFORM_VERSION is the empty string or"
                          + " set to 'latest'.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE),
                  SettingDescription.create(
                      "CIVIFORM_VERSION",
                      "The release version of CiviForm. For example: v1.18.0. If"
                          + " SHOW_CIVIFORM_IMAGE_TAG_ON_LANDING_PAGE is set to true, is also"
                          + " shown on the login page if it a value other than the empty string or"
                          + " 'latest'.",
                      /* isRequired= */ false,
                      SettingType.STRING,
                      SettingMode.ADMIN_READABLE),
                  SettingDescription.create(
                      "CLIENT_IP_TYPE",
                      "Where to find the IP address for incoming requests. Default is \"DIRECT\""
                          + " where the IP address of the request is the originating IP address."
                          + " If \"FORWARDED\" then request has been reverse proxied and the"
                          + " originating IP address is stored in the X-Forwarded-For header.",
                      /* isRequired= */ false,
                      SettingType.ENUM,
                      SettingMode.ADMIN_READABLE,
                      ImmutableList.of("DIRECT", "FORWARDED")))));
}
