/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-explicit-any */
import fs = require('fs')
import path = require('path')
import sharp = require('sharp')
import type {Reporter} from '@playwright/test/reporter'

/**
 * A custom playwright reporter that runs after all reporters have ended their processing. It
 * handles moving files to the `diff_output` and `updated_snapshots` folders.
 */
class FilePlacementReporter implements Reporter {
  /**
   * Called immediately before test runner exists. At this point all the reporters have received the reporter.onEnd()
   * signal, so all the reports should be built. You can run the code that uploads the reports in this hook.
   * See https://playwright.dev/docs/api/class-reporter#reporter-on-exit
   *
   * @override
   */
  async onExit() {
    await this.populateImages()
  }

  /**
   * Read the json report and kickstart the process of handling the output
   */
  async populateImages() {
    const jsonObj = JSON.parse(
      fs.readFileSync('./tmp/json-output/results.json', 'utf8'),
    )
    await this.walkSuites(jsonObj['suites'])
  }

  /**
   * Recurse through nested suites arrays to get to the specs
   * @param suites An array of elements from a suites property from the playwright json report output
   */
  async walkSuites(suites: any) {
    for (const suite of suites) {
      if (suite.suites !== undefined) {
        await this.walkSuites(suite.suites)
      }

      await this.processSpecs(suite.specs)
    }
  }

  /**
   * Iterate over specs and for ones from failed tests place updated and diff images in desired folders
   * @param specs An array of elements from a specs property from the playwright json report output
   */
  async processSpecs(specs: any) {
    for (const spec of specs) {
      if (spec.ok === true) {
        continue
      }

      for (const test of spec.tests) {
        for (const result of test.results) {
          const attachments = <Array<Attachment>>result.attachments
          const expected = this.findAttachment(
            attachments,
            AttachmentType.EXPECTED,
          )
          const actual = this.findAttachment(attachments, AttachmentType.ACTUAL)
          const diff = this.findAttachment(attachments, AttachmentType.DIFF)

          if (expected === null || actual === null || diff === null) {
            continue
          }

          this.copyActualImageToUpdatedSnapshotsFolder(actual)
          await this.createCompositeDiffAndCopyToDiffOutputFolder(
            expected,
            actual,
            diff,
          )
        }
      }
    }
  }

  /**
   * Copy the image that was made by the tests to the updated_snapshots folder
   * @param actual The {@link Attachment} info for the actual image that was generated by the test
   */
  copyActualImageToUpdatedSnapshotsFolder(actual: Attachment) {
    // The file suffix is changed from `-actual.png` to `-received.png`
    // to maintain compatibility with other scripts.
    const updatedSnapshotPath = path.join(
      './updated_snapshots',
      actual.name.replace('-actual.png', '-received.png'),
    )
    fs.mkdirSync(path.dirname(updatedSnapshotPath), {recursive: true})
    fs.copyFileSync(actual.path, updatedSnapshotPath)
  }

  /**
   * Create a composite image of the expected, diff, and actual images and copy it to the diff_output folder
   * @param expected The {@link Attachment} info for the expect image that exists in the images_snapshot folder
   * @param actual The {@link Attachment} info for the actual image that was generated by the test
   * @param diff The {@link Attachment} info for the diff image that was generated by the test
   */
  async createCompositeDiffAndCopyToDiffOutputFolder(
    expected: Attachment,
    actual: Attachment,
    diff: Attachment,
  ) {
    // Determine the max height based on the three images
    const expectedMetadata = await sharp(expected.path).metadata()
    const diffMetadata = await sharp(diff.path).metadata()
    const actualMetadata = await sharp(actual.path).metadata()
    const canvasHeight = Math.max(
      expectedMetadata.height ?? 0,
      diffMetadata.height ?? 0,
      actualMetadata.height ?? 0,
    )

    // Determine the left position for the second and third images
    const diffFileLeft = expectedMetadata.width ?? 0
    const actualFileLeft = diffFileLeft + (diffMetadata.width ?? 0)

    // Make the new file path
    // Path format is: ./diff_output/test-file-name/image-name.png
    const stitchedImagePath = path.join('./diff_output', diff.name)

    // Make sure the parent directory structure exists
    fs.mkdirSync(path.dirname(stitchedImagePath), {recursive: true})

    // Stitch images together
    const imageWidth = 1280

    sharp({
      create: {
        width: imageWidth * 3,
        height: canvasHeight,
        channels: 4, // RGBA
        background: {r: 255, g: 255, b: 255, alpha: 1},
      },
    })
      .composite([
        {input: expected.path, left: 0, top: 0},
        {input: diff.path, left: diffFileLeft, top: 0},
        {input: actual.path, left: actualFileLeft, top: 0},
      ])
      .png()
      .toFile(stitchedImagePath, (err: Error) => {
        if (err) {
          console.error('Error merging images:', err)
        }
      })
  }

  /**
   * Find attachment by attachment type
   * @param attachments list of attachments to search through
   * @param attachmentType attachment type to search for
   * @returns {Attachment} or null if no match found
   */
  findAttachment(
    attachments: Attachment[],
    attachmentType: AttachmentType,
  ): Attachment | null {
    for (const attachment of attachments) {
      if (attachment.name.endsWith(attachmentType + '.png')) {
        return attachment
      }
    }

    return null
  }
}

/** The shape of the attachment element in the playwright json output */
interface Attachment {
  /** Absolute path to the image file */
  path: string

  /** Name with the test file name and the snapshot name given in the test */
  name: string
}

/** Known attachment types */
enum AttachmentType {
  EXPECTED = 'expected',
  ACTUAL = 'actual',
  DIFF = 'diff',
  TRACE = 'trace',
}

export default FilePlacementReporter
