#! /usr/bin/env bash

# DOC: Run the app locally using Docker for use with running browser tests. Run with --help to print documentation.

source bin/lib.sh
docker::set_project_name_browser_tests

# Default to continuous integration mode disabled.
truth::declare_var_false continuous_integration

# Default to not using both emulators.
# both_emulators should only be true for Azurite browser tests, because these
# tests also require localstack for SES email sending.
truth::declare_var_false both_emulators

# Default to using Localstack emulator.
emulators::set_localstack_emulator_vars

#######################################
# Process the script's commandline args.
# Globals:
#   continuous_integration
#   already_set_cloud_provider
#   cloud_provider
#   emulator
#   emulator_url
#   STORAGE_SERVICE_NAME
# Arguments:
#   1: "$@" - full args array for the script
#######################################
function set_args() {
  while [ "${1:-}" != "" ]; do
    case "$1" in
      "--help")
        cat <<-EOF
Usage: bin/run-browser-test-env [options]

Run a local civiform environment for the browser tests to exercise.

Options:

--ci    Run the environment in CI mode. Removes caching for SBT builds and
        redirects log statements to a .dockerlogs file. Defaults to off.

--aws   Use the AWS emulator (Localstack) for simulating cloud services,
        cannot be used with --azure flag. This is the default.

--azure Use the Azure emulator (Azurite) for simulating cloud storage for file
        upload and download. Also use localstack, since we need that for SES.
EOF
        exit 0
        ;;

      "--ci")
        truth::enable continuous_integration
        readonly COMPOSE_INTERACTIVE_NO_CLI=1

        ;;

      "--azure")
        emulators::set_azurite_emulator_vars
        # We do this because the Azurite tests need both emulators running to
        # be successful. But, for AWS, we only want one emulator running,
        # localstack.
        truth::enable both_emulators
        ;;

      "--aws")
        emulators::ensure_only_one_cloud_provider_flag aws
        # Already defaulted to AWS.
        ;;
    esac

    shift
  done
}

#######################################
# Chooses the dev or ci versions of broswertest
# Arguments:
#   1: if true, use developer mode
#   2: the rest of the arguments for compose
#######################################
function compose_browser_test() {
  local use_dev_env="$1"
  shift 1
  if truth::is_enabled use_dev_env; then
    echo "docker::compose_browser_test_dev" "$@"
    docker::compose_browser_test_dev "$@"
  else
    echo "docker::compose_browser_test" "$@"
    docker::compose_browser_test "$@"
  fi
}

set_args "$@"

bin/pull-image

truth::declare_var_false use_dev

if truth::is_disabled continuous_integration; then
  # If not running in CI, load the dev addition to the browser test compose
  # this mounts the local SBT cache directories for faster subsequent builds.
  echo "Using dev mode"
  truth::enable use_dev
fi

echo "Running docker compose to remove existing containers."
compose_browser_test "${use_dev}" --profile ${cloud_provider} down

# Start emulator.
echo "Running docker compose to start the cloud emulator"
compose_browser_test "${use_dev}" --profile ${cloud_provider} up -d ${emulator}

# Wait until the emulator is running.
echo "Waiting for the cloud emulator"
"bin/${emulator}/wait" "${emulator_url}"

# The --no-recreate option is particularly important for CI scenarios
# where localstack may be recreated due to the additional time involved
# in pulling images.
# See https://github.com/seattle-uat/civiform/issues/2810#issuecomment-1168993637

# localstack emulator is also required for Azurite. This should only run for
# Azure browser tests.
if truth::is_enabled both_emulators; then
  echo "Starting localstack emulator as well"
  if truth::is_enabled continuous_integration; then
    compose_browser_test "${use_dev}" --profile aws up --no-recreate -d localstack >.dockerlogs 2>&1 &
  else
    compose_browser_test "${use_dev}" --profile aws up --no-recreate -d localstack
  fi
fi

# Start everything else.
echo "Running docker compose to start the CiviForm environment:"
if truth::is_enabled continuous_integration; then
  compose_browser_test "${use_dev}" --profile ${cloud_provider} up --no-recreate >.dockerlogs 2>&1 &
else
  compose_browser_test "${use_dev}" --profile ${cloud_provider} up --no-recreate
fi
