#!/bin/bash

# DOC: Run the app locally using Docker for use with running browser tests.

pushd $(git rev-parse --show-toplevel)

set -e

bin/pull-image

if [ -f ".secrets" ]; then
  . .secrets
fi

ci="no"

# Get cloud provider
_setArgs(){
  while [ "${1:-}" != "" ]; do
    case "$1" in
      "--ci")
        ci="yes"
        ;;

      "--azure")
        readonly CLOUD_PROVIDER="azure"
        readonly EMULATOR="azurite"
        readonly SERVER_URL="http://localhost:10000"
        export STORAGE_SERVICE_NAME="azure-blob"
        ;;

      "--aws")
        readonly CLOUD_PROVIDER="aws"
        readonly EMULATOR="localstack"
        readonly SERVER_URL="http://localhost:6645"
        export STORAGE_SERVICE_NAME="s3"
       ;;
    esac

    shift
  done
}

_setArgs "$@"

# default to AWS for now
if [ -z "${CLOUD_PROVIDER}" ]; then
  readonly CLOUD_PROVIDER="aws"
  readonly EMULATOR="localstack"
  readonly SERVER_URL="http://localhost:6645"

  export STORAGE_SERVICE_NAME="s3"
fi

compose_command="docker-compose --profile ${CLOUD_PROVIDER}"
compose_command="${compose_command} -f browser-test/browser-test-compose.yml"

if [[ "${ci}" = "no" ]]; then
  compose_command="${compose_command} -f browser-test/browser-test-compose.dev.yml"
fi

compose_command="${compose_command} up"

readonly START_EMULATOR_COMMAND="${compose_command} -d ${EMULATOR}"
echo "Running docker compose to start the cloud emulator:"
echo "${START_EMULATOR_COMMAND}"

# start emulator
eval "${START_EMULATOR_COMMAND}"

# wait until the emulator is running
"bin/${EMULATOR}/wait" "${SERVER_URL}"

if [[ "${ci}" = "yes" ]]; then
  compose_command="${compose_command} > .dockerlogs 2>&1 &"
fi

echo "Running docker compose to start the CiviForm environment:"
echo "${compose_command}"

# start everything else
eval "${compose_command}"

popd
