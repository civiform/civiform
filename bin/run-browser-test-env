#! /usr/bin/env bash

# DOC: Run the app locally using Docker for use with running browser tests. Run with --help to print documentation.

source bin/lib.sh

# Default to continuous integration mode disabled.
truth::declare_var_false continuous_integration

# Default to  not using both emulators
truth::declare_var_false both_emulators

# Default to using Localstack emulator.
emulators::set_localstack_emulator_vars

#######################################
# Process the script's commandline args.
# Globals:
#   continuous_integration
#   already_set_cloud_provider
#   cloud_provider
#   emulator
#   emulator_url
#   STORAGE_SERVICE_NAME
# Arguments:
#   1: "$@" - full args array for the script
#######################################
function set_args() {
  while [ "${1:-}" != "" ]; do
    case "$1" in
    "--help")
      cat <<-EOF
Usage: bin/run-browser-test-env [options]

Run a local civiform environment for the browser tests to exercise.

Options:

--ci    Run the environment in CI mode. Removes caching for SBT builds and
        redirects log statements to a .dockerlogs file. Defaults to off.

--aws   Use the AWS emulator (Localstack) for simulating cloud services,
        cannot be used with --azure flag. This is the default.

--azure Use the Azure emulator (Azurite) for simluating cloud services.
        Also use localstack, since we need that for SES.
EOF
      exit 0
      ;;

    "--ci")
      truth::enable continuous_integration
      ;;

    "--azure")
      cloudProvider="azure"
      emulator="azurite"
      devServer="http://localhost:10000"
      export STORAGE_SERVICE_NAME="azure-blob"
      truth::enable both_emulators
      ;;

    "--aws")
      cloudProvider="aws"
      emulator="localstack"
      devServer="http://localhost:6645"
      export STORAGE_SERVICE_NAME="s3"
      ;;
    esac

    shift
  done
}

set_args "$@"

echo "Making sure we're up to date with the latest dev... " \
  "set environment variable USE_LOCAL_CIVIFORM=1 to skip"
bin/pull-image >/dev/null

docker::set_network_name_browser_tests

# default to AWS for now
if [ -z "$cloudProvider" ]; then
  cloudProvider="aws" && emulator="localstack" && devServer="http://localhost:6645"
  export STORAGE_SERVICE_NAME="s3"
fi

if truth::is_disabled continuous_integration; then
  # If not running in CI, load the dev addition to the browser test compose
  # this mounts the local SBT cache directories for faster subsequent builds.
  compose_command="${compose_command} -f browser-test/browser-test-compose.dev.yml"
fi

compose_command="docker-compose --profile ${cloudProvider}"
compose_command="${compose_command} -f browser-test/browser-test-compose.yml"

if truth::is_disabled continuous_integration; then
  # If not running in CI, load the dev addition to the browser test compose
  # this mounts the local SBT cache directories for faster subsequent builds.
  compose_command="${compose_command} -f browser-test/browser-test-compose.dev.yml"
fi

compose_command="${compose_command} up"

readonly START_EMULATOR_COMMAND="${compose_command} -d ${emulator}"
echo "Running docker compose to start the cloud emulator:"
echo "  ${START_EMULATOR_COMMAND}"

# Start emulator.
eval "${START_EMULATOR_COMMAND}"

# Wait until the emulator is running.
"bin/${emulator}/wait" "${devServer}"

if truth::is_enabled continuous_integration; then
  compose_command="${compose_command} > .dockerlogs 2>&1 &"
fi

echo "Running docker compose to start the CiviForm environment:"
echo "  ${compose_command}"

docker-compose -f browser-test/browser-test-compose.yml -f browser-test/browser-test-compose.dev.yml up

# local stack emulator is also required for Azurite
if truth::is_enabled both_emulators; then
  echo "Bring up localstack emulator as well"
  second_compose_command="docker-compose --profile aws \
                                 -f browser-test/browser-test-compose.yml \
                                 -f browser-test/browser-test-compose.dev.yml \
                                 up -d localstack"
  if truth::is_enabled continuous_integration; then
    second_compose_command="${second_compose_command} > .dockerlogs 2>&1 &"
  fi

  eval "${second_compose_command}"
  # wait till localstack running
  wait_command="bin/localstack/wait http://localhost:6645"
  eval "${wait_command}"
fi

docker-compose -f browser-test/browser-test-compose.yml -f browser-test/browser-test-compose.dev.yml up

