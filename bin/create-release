#! /usr/bin/env python3

import os
import re
import requests
import subprocess
import shlex
import sys

# DOC: Create a new draft CiviForm image release. Usage: bin/create-release COMMIT_SHA RELEASE_NUMBER
#
# Requirements:
#   Must have creds to login to docker hub as 'civiform' user.
#   Must have a GitHub API token with repo and read:org scopes located at 'gh-release-token.txt'
#
# When successful, this script:
#   1. tags the git commit for the release with the release number
#   2. tags the docker image for the release with the release number
#   3. creates a new draft release on github

if not os.path.exists('gh-release-token.txt'):
    print('''
        gh-release-token.txt not found in root directory
        Create one with repo and read:org scopes at https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
    ''', file=sys.stderr)
    exit(1)

if len(sys.argv) != 3:
    print(
        'Usage: bin/create-release COMMIT_SHA RELEASE_NUMBER', file=sys.stderr)
    exit(1)


def shell_cmd(command_string):
    try:
        process = subprocess.run(
            shlex.split(command_string), check=True, capture_output=True)
    except FileNotFoundError:
        return ''
    return process.stdout.decode('ascii') if process else ''

################################################################################
# Set release variables
################################################################################

COMMIT_SHA = sys.argv[1]
RELEASE_NUMBER = sys.argv[2]
RELEASER_NAME = shell_cmd('git config --get user.name')
RELEASER_EMAIL = shell_cmd('git config --get user.email')

################################################################################
# Resolve and validate GitHub token, check auth
################################################################################

with open('gh-release-token.txt', 'r') as file:
    GH_TOKEN = file.read().rstrip()

if not GH_TOKEN.startswith('ghp_'):
    print('Invalid token found in gh-release-token.txt', file=sys.stderr)
    exit(1)

check_gh_auth_response = requests.get(
    'https://api.github.com/repos/seattle-uat/civiform',
    headers={'Authorization': f'token {GH_TOKEN}'})
if check_gh_auth_response.status_code != 200:
    print(
        f'GitHub API auth failed, satus code: {str(check_gh_auth_response.status_code)}',
        file=sys.stderr)
    exit(1)

################################################################################
# Check docker hub auth
################################################################################

if not 'Login Succeeded' in shell_cmd(
        'docker login') or not 'civiform' in shell_cmd('docker info'):
    print('Unable to login to docker hub')
    exit(1)

################################################################################
# Validate release version number
################################################################################

if not re.match('^v\d+\.\d+\.\d+$', RELEASE_NUMBER):
    print('Invalid version number: ' + RELEASE_NUMBER, file=sys.stderr)
    exit(1)

################################################################################
# Validate commit SHA
################################################################################

branches_containing_commit_sha = shell_cmd(
    'git --no-pager branch --contains ' + COMMIT_SHA)
branches_containing_commit_sha = [
    # The output of the command is a list of branch names, with a '*' at the
    # beginning of the current branch. This regex and the strip transform
    # the list to only branch names with no trailing or preceding whitespace.
    re.sub('\*', '', x).strip()
    for x in branches_containing_commit_sha.split('\n')
]
if not 'main' in branches_containing_commit_sha:
    print('Invalid commit SHA: ' + COMMIT_SHA, file=sys.stderr)
    exit(1)

################################################################################
# Find snapshot tag that matches commit SHA
################################################################################

# Git defaults to using the first 7 chars of the full SHA for the short SHA.
SHORT_SHA = shell_cmd('git rev-parse --short ' + COMMIT_SHA)[:7]

print(f'Searching for an image tag with short SHA {SHORT_SHA}')

tags_url = 'https://registry.hub.docker.com/v2/repositories/civiform/civiform/tags?order=-last_activity&page_size=100'
while True:
    snapshot_tag = None
    response = requests.get(tags_url)

    if response.status_code != 200:
        print(
            f'Docker Hub request failed with status code: {str(response.status_code)}',
            file=sys.stderr)
        exit(2)

    response_json = response.json()

    for tag_info in response_json['results']:
        if SHORT_SHA in tag_info['name']:
            snapshot_tag = tag_info['name']
            break

    if snapshot_tag is not None:
        break

    if response_json['next'] is None:
        print(
            f'No snapshot tag found with short SHA: {SHORT_SHA}',
            file=sys.stderr)
        exit(1)

    tags_url = response_json['next']

print(f'Found existing server image: {snapshot_tag}')

################################################################################
# Add tag to git history
################################################################################

print('Adding tag to git history')

shell_cmd(
    f"git tag -a {RELEASE_NUMBER} -m 'Releaser: {RELEASER_EMAIL}' {COMMIT_SHA}")
shell_cmd(f'git push origin {RELEASE_NUMBER}')

################################################################################
# Tag Docker image with release
################################################################################

print('Tagging Docker image and pushing to Docker Hub')

shell_cmd(f'docker pull civiform/civiform:{snapshot_tag}')
shell_cmd(
    f'docker tag civiform/civiform:{snapshot_tag} civiform/civiform:{RELEASE_NUMBER}'
)
shell_cmd(f'docker push civiform/civiform:{RELEASE_NUMBER}')

################################################################################
# Create GitHub release
################################################################################

print('Creating GitHub release')

create_release_url = 'https://api.github.com/repos/seattle-uat/civiform/releases'
create_release_body = {
    'tag_name': RELEASE_NUMBER,
    'name': RELEASE_NUMBER,
    'draft': True,
    'generate_release_notes': True
}
create_release_headers = {
    'Accept': 'application/vnd.github.v3+json',
    'Authorization': f'token {f}'
}

response = requests.post(
    create_release_url,
    json=create_release_body,
    headers=create_release_headers)
if response.status_code != 201:
    print(
        'GitHub request failed with status code: ' + str(response.status_code),
        file=sys.stderr)
    print(response.json()['message'], file=sys.stderr)
    exit(2)

RELEASE_URL = response.json()['html_url']
print(f'\nDraft release created at: {RELEASE_URL}')
