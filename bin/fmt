#! /usr/bin/env bash

# DOC: Autoformat Java and TypeScript source files. Usually good to run before committing.
#
# Run with -d <diffbase: branch or commit> flag to customize the diffbase. By default, the
# diffbase is origin/main
# Example usage:
#   * Diff against your local main branch:
#     bin/fmt -d main
#
#   * Diff against a specific commit:
#     bin/fmt -d 191b1d30c369d9971ed2bddb9438ea571f300ab8
#
#   * Diff against the current commit:
#     bin/fmt -d HEAD
#
#   * Diff against the previous commit:
#     bin/fmt -d HEAD^

source bin/lib.sh
docker::set_project_name_dev

bin/pull-image --formatter

# The settings manifest needs to be formatted after codegen, since it runs quickly
# we run it on every call to bin/fmt.
bin/generate-settings-manifest

# Can't use TTY in CI
interactive_flag="-it"
if [[ -n "${CI}" ]]; then
  interactive_flag=""
fi

readonly GIT_DIR="$(git rev-parse --show-toplevel)"
repo_type="not-worktree"

if [[ "$(git rev-parse --git-common-dir)" != "$(git rev-parse --git-dir)" ]]; then
  repo_type="worktree"
fi

# If repo_type is a directory then the git repository was created by with the common `git clone` way
# which is just a single working tree pointing at the current branch. Is is the more common way
# in which folks clone a repository.
# Example:
#   > git clone git@github.com:civiform/civiform.git
#   > cd ./civiform
#   > git checkout -b new-branch-name
#   > bin/fmt
if [[ "${repo_type}" == "not-worktree" ]]; then
  docker run --rm ${interactive_flag} \
    -v "$(pwd):/code" \
    civiform/formatter \
    "$@"

# If repo_type is a file then the current folder was created with the command `git worktree add` which
# is a branch checked out in its own folder. For this we pass in the path of the worktree parent so
# the fmt command will has access to other branches when it does a diff.
# Example:
#   > git clone --bare git@github.com:civiform/civiform.git
#   > cd ./civiform
#   > git worktree add -B new-branch-name ./new-branch-name
#   > cd ./new-branch-name
#   > bin/fmt
elif [[ "${repo_type}" == "worktree" ]]; then
  worktree_root="$(dirname "${GIT_DIR}")"

  docker run --rm ${interactive_flag} \
    -v "$(pwd):/code" \
    -v "${worktree_root}:${worktree_root}" \
    civiform/formatter \
    "$@"
else
  echo "Could not find the git work tree for ${GIT_DIR}"
  exit 1
fi
