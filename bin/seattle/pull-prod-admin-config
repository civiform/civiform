#! /bin/bash

# DOC: Dump program and question configuration from production or staging PostgreSQL database to a local archive file using pg_dump.

set -e

export AWS_DEFAULT_REGION="us-west-2"
readonly AWS_DEFAULT_REGION
readonly TIMESTAMP=$(date +%s)
readonly STAGING_DB_PASSWORD_ID="arn:aws:secretsmanager:us-west-2:405662711265:secret:staging-databasepassword-rh1wfF"
readonly PROD_DB_PASSWORD_ID="arn:aws:secretsmanager:us-west-2:405662711265:secret:prod-databasepassword-OM7x4q"

ENVIRONMENT="staging"
DB_PASSWORD_ID="${STAGING_DB_PASSWORD_ID}"

if [[ "$1" = "prod" ]]; then
    ENVIRONMENT="prod"
    DB_PASSWORD_ID="${PROD_DB_PASSWORD_ID}"
fi

readonly ENVIRONMENT
readonly DB_PASSWORD_ID

echo "Connecting to ${ENVIRONMENT} DB..."

readonly VPC_ID=$(aws ec2 describe-vpcs \
    --filters "Name=tag:Name,Values=${ENVIRONMENT}.civiform.vpc" \
    --query 'Vpcs[0].VpcId' \
    --output text) && echo "${ENVIRONMENT} VPC ID: ${VPC_ID}"

# Create a new security group and allow my IP for inbound
readonly SG_ID=$(aws ec2 create-security-group \
    --group-name "${ENVIRONMENT}.civiform-emergencyaccess-${TIMESTAMP}.sg" \
    --description "My ${ENVIRONMENT} emergency access security group" \
    --vpc-id "${VPC_ID}" \
    --query 'GroupId' \
    --output text) && echo "Created a new security group (ID: ${SG_ID}) for emergency access"
readonly MY_IPADDRESS=$(curl -s "https://checkip.amazonaws.com") && \
    echo "Authorize my IP (${MY_IPADDRESS}) to access the security group"
aws ec2 authorize-security-group-ingress \
    --group-id "${SG_ID}" \
    --protocol tcp \
    --port 22 \
    --cidr "${MY_IPADDRESS}/32"

# Allow the new security group to access DB
readonly DBSG_ID=$(aws ec2 describe-security-groups \
    --filters "Name=vpc-id,Values=${VPC_ID}" "Name=group-name,Values=${ENVIRONMENT}.civiform-db.sg" \
    --query 'SecurityGroups[0].GroupId' \
    --output "text") && echo "Authorize emergency access to DB security group (ID: ${DBSG_ID})"
aws ec2 authorize-security-group-ingress \
    --group-id "${DBSG_ID}" \
    --protocol "tcp" \
    --port "0-65535" \
    --source-group "${SG_ID}"

# Create a new key pair for my EC2 instance
echo "Creating a new key pair for launching an EC2 instance"
readonly KEY_NAME="CiviFormEmergencyKeyPair${TIMESTAMP}${ENVIRONMENT}"
readonly KEY_FILE="${KEY_NAME}.pem"
aws ec2 create-key-pair \
    --key-name "${KEY_NAME}" \
    --query 'KeyMaterial' \
    --output "text" > "${KEY_FILE}"
chmod 400 "${KEY_FILE}"
echo "Private key is stored locally as ${KEY_FILE}"

# Find the subnet to launch the instance into
readonly SUBNET_ID=$(aws ec2 describe-subnets \
    --filters "Name=vpc-id,Values=${VPC_ID}" "Name=tag:Name,Values=${ENVIRONMENT}.public-az1.subnet" \
    --query 'Subnets[0].SubnetId' \
    --output text) && echo "Found public subnet (ID: ${SUBNET_ID}) to launch the instance into"

# Launch a small ubuntu VM
readonly INSTANCE_ID=$(aws ec2 run-instances \
    --image-id "ami-03d5c68bab01f3496" \
    --count 1 \
    --instance-type "t2.micro" \
    --key-name "${KEY_NAME}" \
    --security-group-ids "${SG_ID}" \
    --subnet-id "${SUBNET_ID}" \
    --query 'Instances[0].InstanceId' \
    --output text) && \
    echo "Created EC2 instance (ID: ${INSTANCE_ID}) and waiting for it to be ready. This may take 3-5 minutes."
aws ec2 create-tags --resources "${INSTANCE_ID}" \
    --tags "Key=Name,Value=MyEmergencyDBAccessInstance${TIMESTAMP}${ENVIRONMENT}"

# Wait until the instance is available for connection
until aws ec2 wait instance-status-ok --instance-ids "${INSTANCE_ID}"; do :; done
readonly INSTANCE_IPADDRESS=$(aws ec2 describe-instances \
    --instance-ids "${INSTANCE_ID}" \
    --query 'Reservations[0].Instances[0].PublicIpAddress' \
    --output text) && echo "Instance public IP: ${INSTANCE_IPADDRESS}"

# Find the DB address
readonly DB_ADDRESS=$(aws rds describe-db-instances \
    --db-instance-identifier "${ENVIRONMENT}-civiform-postgres-db" \
    --query 'DBInstances[0].Endpoint.Address' \
    --output text) && echo "DB address: ${DB_ADDRESS}"

# Get the DB password
readonly DB_PASSWORD=$(aws secretsmanager get-secret-value \
    --secret-id "${DB_PASSWORD_ID}" \
    --query 'SecretString' \
    --output text)

# Connect to the instance, install psql, and connect to DB
echo "Connecting to the database"
ssh -q -o "UserKnownHostsFile=/dev/null" \
    -o "StrictHostKeyChecking=no" \
    -o "IdentitiesOnly=yes" \
    -t -i "${KEY_FILE}" \
    "ubuntu@${INSTANCE_IPADDRESS}" \
    "yes | sudo apt-get update > /dev/null; \
        yes | sudo apt-get install postgresql-client > /dev/null; \
        PGPASSWORD='${DB_PASSWORD}' pg_dump -w -Fc \
        -h $DB_ADDRESS \
        -d postgres \
        -U civiform \
        -t programs \
        -t questions \
        -t versions \
        -t versions_programs \
        -t versions_questions \
        postgres > program_data.dump"

echo "Copying file to local computer using scp"
scp -o "UserKnownHostsFile=/dev/null" \
  -o "StrictHostKeyChecking=no" \
  -o "IdentitiesOnly=yes" \
  -i "${KEY_FILE}" \
  "ubuntu@${INSTANCE_IPADDRESS}:/home/ubuntu/program_data.dump" \
  .

# Terminate the instance
echo "Terminating the instance"
aws ec2 terminate-instances --instance-ids "${INSTANCE_ID}"

# Delete the emergency key pair
echo "Removing key pair"
aws ec2 delete-key-pair --key-name "${KEY_NAME}"
rm -f "${KEY_FILE}"

# Remove the emergency security group from DB security group
echo "Revoke access to DB security group"
aws ec2 revoke-security-group-ingress \
    --group-id "${DBSG_ID}" \
    --protocol tcp \
    --port "0-65535" \
    --source-group "${SG_ID}"

# Remove the emergency security group
echo "Waiting for EC2 instance to terminate"
aws ec2 wait instance-terminated --instance-ids "${INSTANCE_ID}"
echo "Removing the emergency security group"
aws ec2 delete-security-group --group-id "${SG_ID}"
