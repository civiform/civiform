#! /bin/bash

# DOC: Build a new production docker image, push it to the AWS and Docker container registries and deploy to AWS staging.

pushd $(git rev-parse --show-toplevel)

set -e
set +x
export AWS_DEFAULT_REGION=us-west-2
REGION=us-west-2
STACK=civiform-staging
if [ ! -z "$1" ]; then
  STACK="$1"
fi

aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/t1q6b4h2
docker build -f prod.Dockerfile -t universal-application-tool --cache-from public.ecr.aws/t1q6b4h2/universal-application-tool:latest --build-arg BUILDKIT_INLINE_CACHE=1 .
docker tag universal-application-tool:latest public.ecr.aws/t1q6b4h2/universal-application-tool:latest
docker push public.ecr.aws/t1q6b4h2/universal-application-tool:latest

ECSSERVICE=$(aws cloudformation describe-stacks --region ${REGION} --stack-name $STACK | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "ECSService") | .OutputValue')
ECSCLUSTER=$(aws cloudformation describe-stacks --region ${REGION} --stack-name $STACK | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "ECSCluster") | .OutputValue')

aws ecs update-service --region=${REGION} --cluster "$ECSCLUSTER" --service "$ECSSERVICE" --force-new-deployment

deadline=$(($(date +%s) + 900))
until aws ecs wait services-stable --region=${REGION} --cluster "$ECSCLUSTER" --services "$ECSSERVICE"; do
    if (( $(date +%s) > $deadline )); then
        echo "deadline exceeded waiting for service update to stabilize"
        exit 1
    fi
done

# clear AWS login state
docker logout public.ecr.aws/t1q6b4h2

# log the docker CLI into the Docker Hub container registry
echo $DOCKER_HUB_ACCESS_TOKEN | docker login --username $DOCKER_HUB_USERNAME --password-stdin docker.io

# push the new image to the Docker Hub registry
docker tag universal-application-tool:latest civiform/civiform:latest
docker push docker.io/civiform/civiform:latest

popd
