#! /usr/bin/env bash

#######################################
# Get the ip for the bastion VM 
# Arguments:
#   1: the resource group name
#######################################
function bastion::get_vm_ip() {
    readonly VM_IP_ADDRESS=$(az network public-ip show \
        -g "${1}" \
        -n "${1}-ip" \
        --query "ipAddress" | tr -d '"')
    echo "${VM_IP_ADDRESS}"
}

#######################################
# Get the postgres host for 
# Arguments:
#   1: the resource group name
#   2: the name of the database
#######################################
function bastion::get_postgres_host() {
    readonly POSTGRES_HOST=$(az postgres server show \
    -g "${1}" \
    -n "${2}" \
    --query "fullyQualifiedDomainName" | tr -d '"')
    echo "${POSTGRES_HOST}"
}

#######################################
# Get the ssh command to connect to a VM
# Arguments:
#   1: the ip of the vm you will connect to
#   2: the key name to use to connect to
#   3: command to run after ssh'ing
#######################################
function bastion::get_ssh_command() {
    echo "ssh -i $HOME/.ssh/${2} adminuser@${1} '${3}'"
}

#######################################
# Update the bastion to allow ssh from the key name
# Arguments:
#   1: the resource group name
#   2: the key name to use to connect to
#######################################
function bastion::update_bastion_ssh_keys() {
    echo "az vm user update \
    -u adminuser \
    -g "${1}" \
    -n "${1}-bstn-vm" \
    --ssh-key-value \"$(< ~/.ssh/${2}.pub)\""
}

#######################################
# Get the command to run on the bastion to connect to postgres
# Arguments:
#   1: the postgres host to connect to 
#######################################
function bastion::get_connect_to_postgres_command() {
    echo "export DEBIAN_FRONTEND='noninteractive'; \
    yes | sudo apt-get update > /dev/null; \
    yes | sudo apt-get install postgresql-client > /dev/null; \
    psql -h ${1} -d postgres -U psqladmin@${1}"
}