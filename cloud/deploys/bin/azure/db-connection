#! /usr/bin/env bash
source azure/bastion

# DOC: Connect to the database via the bastion
# example: azure/db-connection -g sgdev -d civiform-artistic-halibut
key_name="bastion"
while getopts g:d:k flag
do
    case "${flag}" in
        g) resource_group=${OPTARG};;
        d) database_name=${OPTARG};;
        k) key_name=${OPTARG};;
    esac
done

if [[ ! "${resource_group}" ]] || [[ ! "${database_name}" ]]; then
  echo "arguments -g and -d must be provided" >&2
  exit 1
fi

key_file="$HOME/.ssh/${key_name}"
if ! [[ -f "${key_file}" ]]; then
    echo "Creating a new ssh key"
    ssh-keygen -t rsa -b 4096 -f "${key_file}"
fi

readonly VM_IP_ADDRESS=$(bastion::get_vm_ip "${resource_group}")
echo "Bastion vm ip address: ${VM_IP_ADDRESS}"

readonly POSTGRES_HOST=$(bastion::get_postgres_host "${resource_group}" "${database_name}")
echo "postgreshost: ${POSTGRES_HOST}"

# echo "Adding the public key to the bastion vm"
eval $(bastion::update_bastion_ssh_keys "${resource_group}" "${key_name}")

# todo: add a pgpass file here
readonly PSQL_CONNECT=$(bastion::get_connect_to_postgres_command "${POSTGRES_HOST}")

echo "SSHing into machine and opening postgres, \
type command here and ctrl-d to exit"
eval $(bastion::get_ssh_command "${VM_IP_ADDRESS}" "${key_name}" "${PSQL_CONNECT}")
