#! /usr/bin/env bash
source cloud/azure/bin/lib.sh


# DOC: Load data into an existing database. 
# DOC: Required to pass in the resource group (-g), the database name (-d) and the keyvault name (-v), the location of the dump file on the local machine (-f) and the output file name (-b) 
# DOC: example: bin/pg-restore -g sgdev -d civiform-artistic-halibut -v sgdev-civiform-kv -f ~/Desktop/pg_dump.dump testData.dump
key_name="bastion" 
while getopts g:d:k:v:f:b: flag
do
  case "${flag}" in
    g) resource_group=${OPTARG};;
    d) database_name=${OPTARG};;
    k) key_name=${OPTARG};;
    v) vault_name=${OPTARG};;
    f) local_filename=${OPTARG};;
    b) bastion_filename=${OPTARG};;
  esac
done

if  [[ ! "${resource_group}" ]] \
  || [[ ! "${database_name}" ]] \
  || [[ ! "${vault_name}" ]] \
  || [[ ! "${local_filename}" ]] \
  || [[ ! "${bastion_filename}" ]]; then
  out::error "arguments -g and -d and -v  and -f and -b must be provided"
  exit 1
fi

readonly KEY_FILE="${HOME}/.ssh/${key_name}"
bastion::setup_bastion_ssh "${resource_group}" "${KEY_FILE}"

readonly VM_IP_ADDRESS=$(bastion::get_vm_ip "${resource_group}")
echo "Bastion vm ip address: ${VM_IP_ADDRESS}"

readonly POSTGRES_HOST=$(bastion::get_postgres_host \
  "${resource_group}" "${database_name}")
echo "postgres host: ${POSTGRES_HOST}"

echo "Creating the pgdump directory if it doesn't exit"
bastion::bastion_ssh_exec \
  "${VM_IP_ADDRESS}" "${KEY_FILE}" "mkdir -p ~/pgdump"

echo "Copying pg_dump to bastion"
bastion::scp_to_bastion "${VM_IP_ADDRESS}" "${KEY_FILE}" "${local_filename}" "~/pgdump/${bastion_filename}"

readonly PG_RESTORE_COMMAND=$(bastion::get_pg_restore_command \
  "${POSTGRES_HOST}" "${vault_name}" "~/pgdump/${bastion_filename}")
echo "SSHing into machine and opening postgres, \
type command here and \\q to exit"
bastion::bastion_ssh_exec \
  "${VM_IP_ADDRESS}" "${KEY_FILE}" "${PG_RESTORE_COMMAND}"

bastion::teardown_bastion_ssh "${resource_group}" "${KEY_FILE}"
