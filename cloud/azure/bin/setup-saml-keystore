#! /usr/bin/env bash
source bin/lib.sh

# DOC: Generate PKCS12 keystore and upload to Azure Blob Storage. 
# DOC: Make sure to run the key_vault_setup script before running this one.
# DOC: Required flags are:
# DOC: g - Azure resource group
# DOC: v - Azure key vault name
# DOC: s - Azure storage account name
# DOC: l - Azure region

while getopts g:v:s:l: flag
do
  case "${flag}" in
    g) resource_group=${OPTARG};;
    v) vault_name=${OPTARG};;
    s) storage_account_name=${OPTARG};;
    l) location=${OPTARG};;
  esac
done

if [[ ! "${resource_group}" ]] \
   || [[ ! "${storage_account_name}" ]] \
   || [[ ! "${vault_name}" ]] \
   || [[ ! "${location}" ]]; then
  out::error "arguments -g, -s, v, and -l must be provided"
  exit 1
fi

echo "Assign the role 'Storage Blob Data Contributor' to the current user"
storage::assign_storage_blob_data_contributor_role_to_user "${resource_group}"

echo "Create resource group ${resource_group}"
azure::create_resource_group "${resource_group}" "${location}"

echo "Creating container 'saml-keystore' in account ${storage_account_name}"
storage::create_storage_account "${resource_group}" "${location}" "${storage_account_name}"
storage::create_storage_container "${storage_account_name}" "saml-keystore"

echo "Generating and storing keystore password"
key_vault::add_generated_secrets "saml-keystore-pass"

echo "Generating keystore file"
# PKCS12 keys require the keypass and storepass to be the same, so we'll only use one secret here.
KEYSTORE_PASS=$(key_vault::get_secret_value "${vault_name}"  "saml-keystore-pass")
# This step is interactive but can be parametrized and automated if necessary.
keytool -genkeypair \
    -alias "civiform-saml" \
    -keypass "${KEYSTORE_PASS}" \
    -keystore "civiformSamlKeystore.jks" \
    -storepass "${KEYSTORE_PASS}"  \
    -keyalg RSA -keysize 2048 -validity 3650

echo "Uploading keystore file"
storage::upload_blob "${storage_account_name}" "saml-keystore" "civiformSamlKeystore.jks"

echo "Printing public certificate."
keytool -exportcert \
  -alias "civiform-saml" \
  -keystore "civiformSamlKeystore.jks" \
  -storepass "${KEYSTORE_PASS}" \
  -rfc \
  -file "serviceProvider.cert"

printf "\n\n"
cat "serviceProvider.cert"
printf "\n\n"

echo "Cleaning up certificate and keystore files"
rm "civiformSamlKeystore.jks" "serviceProvider.cert"
echo "Copy the certificate above into the Service Provider Certificate field when configuring the SAML Identity Provider"
