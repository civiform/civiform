#! /usr/bin/env bash
set -e

source "cloud/shared/bin/lib.sh"
source "cloud/azure/bin/lib.sh"

# loads and validates config variables and generates tfvars file
python3 "cloud/shared/bin/lib/tf_apply_setup.py"

azure::set_common_vars
azure_log::ensure_log_role_assignments
azure_log::fetch_log_file

if [[ "${CIVIFORM_MODE}" == "dev" ]];then
    terraform::copy_override
fi

if ! terraform::perform_apply; then
    out::error "Terraform deployment failed."
    log::deploy_failed "${IMAGE_TAG}" "${AZURE_USER_ID}"
    azure_log::upload_log_file
    exit 1
fi

azure::set_new_container_tag "${AZURE_RESOURCE_GROUP}" "${AZURE_APP_NAME}" "${IMAGE_TAG}"

if health::wait_for_success "${AZURE_CANARY_URL}/loginForm"; then
    echo "New container successfully started in canary slot"
else
    log::deploy_failed "${IMAGE_TAG}" "${AZURE_USER_ID}"
    azure_log::upload_log_file
    exit 1
fi

echo "Swapping deployment slot 'canary' into production. This may take up to 10 minutes."
azure::swap_deployment_slot "${AZURE_RESOURCE_GROUP}" "${AZURE_APP_NAME}"
echo "Success! The new application version is up and running."

echo "Updating deployment log."
log::deploy_succeeded "${IMAGE_TAG}" "${AZURE_USER_ID}"
azure_log::upload_log_file
echo "Deployment log updated."
