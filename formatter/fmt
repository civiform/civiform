#! /usr/bin/env bash

set -e
set +x
set -o pipefail

# https://git-scm.com/docs/git-config/2.35.2#Documentation/git-config.txt-safedirectory
git config --global --add safe.directory /code
cd /code

diffbase="origin/main"
while getopts d: flag; do
  case "${flag}" in
    d)
      diffbase="${OPTARG}"
      ;;
  esac
done
echo "Using diffbase ${diffbase}"

# Gets the list of file paths for files that are tracked by git and have
# changes relative to the main branch.
function get_tracked_modified_files() {
  # Exclude deleted files:
  # https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---diff-filterACDMRTUXB82308203
  git diff --diff-filter=d --name-only ${diffbase}
}

# Gets the list of file paths for files that are not tracked by git and are
# not excluded by the .gitignore file.
function get_untracked_files() {
  git ls-files --others --exclude-standard
}

function get_modified_java_files() {
  (
    get_tracked_modified_files
    get_untracked_files
  ) | grep -E ".+\.java$"
}

function get_modified_json_files() {
  # Zero matches in grep returns a 1, but we want to treat as empty which is
  # why the `|| true` is there
  (
    get_tracked_modified_files
    get_untracked_files
  ) | grep -E ".+\.(json)$" || true
}

function get_modified_ts_files() {
  # Zero matches in grep returns a 1, but we want to treat as empty which is
  # why the `|| true` is there
  (
    get_tracked_modified_files
    get_untracked_files
  ) | grep -E ".+\.(ts)$" || true
}

function get_modified_md_files() {
  # Zero matches in grep returns a 1, but we want to treat as empty which is
  # why the `|| true` is there
  (
    get_tracked_modified_files
    get_untracked_files
  ) | grep -E ".+\.(md)$" || true
}

function get_modified_html_files() {
  # Zero matches in grep returns a 1, but we want to treat as empty which is
  # why the `|| true` is there
  (
    get_tracked_modified_files
    get_untracked_files
  ) | grep -E ".+\.(html)$" || true
}

function get_modified_ts_json_md_and_html_files() {
  (
    get_modified_json_files
    get_modified_ts_files
    get_modified_md_files
    get_modified_html_files
  )
}

function get_modified_python_files() {
  (
    get_tracked_modified_files
    get_untracked_files
  ) | grep -E ".+\.py$"
}

if [[ -z $(get_modified_java_files) ]]; then
  echo 'No modified java files found'
else
  echo 'Start format java'
  java -jar /fmt.jar --replace $(get_modified_java_files)
  echo 'Done formatting java'
fi

modified_ts_json_md_html="$(get_modified_ts_json_md_and_html_files)"
if [[ -z "${modified_ts_json_md_html}" ]]; then
  echo 'No modified TypeScript, JSON, Markdown, or HTML files for prettier found'
else
  echo 'Start formatting with prettier'
  # prettier is installed as node module in `formatter` directory
  cd formatter

  # Prefix each file with ../ and remove newlines. The newlines prevent printf from
  # prefixing each line itself which is why this sed command is needed.
  prettier_file_list="$(printf "%s" "${modified_ts_json_md_html}" | sed 's/^/ ..\//' | tr -d '\n')"

  # The prettier_file_list array should not be surrounded by quotes, in this case
  # we want word splitting to occur so prettier will operate in each file. If
  # quoted it gets treated as a single path.
  npx prettier \
    --write \
    --config ../.prettierrc.js \
    --ignore-path ../.prettierignore \
    --ignore-unknown \
    -- ${prettier_file_list[@]}

  cd ..
  echo 'Done formatting with prettier'
fi

modified_ts="$(get_modified_ts_files)"
if [[ -z "${modified_ts}" ]]; then
  echo 'No modified TypeScript files for eslint found'
else
  echo 'Start formatting with eslint'

  # Prefix each file with ../ and remove newlines. The newlines prevent printf from
  # prefixing each line itself which is why this sed command is needed.
  eslint_app_file_list="$(printf "%s" "${modified_ts}" | (grep -E "^app" || true) | sed 's/^/ ..\//' | tr -d '\n')"
  eslint_browsertest_file_list="$(printf "%s" "${modified_ts}" | (grep -E "^browser-test" || true) | sed 's/^/ ..\//' | tr -d '\n')"

  cd server
  npm install --silent

  # The eslint_app_file_list array should not be surrounded by quotes, in this case
  # we want word splitting to occur so eslint will operate in each file. If
  # quoted it gets treated as a single path.
  npx eslint --fix ${eslint_app_file_list[@]}

  cd ../browser-test
  npm install --silent

  # The eslint_browsertest_file_list array should not be surrounded by quotes, in this case
  # we want word splitting to occur so eslint will operate in each file. If
  # quoted it gets treated as a single path.
  npx eslint --fix ${eslint_browsertest_file_list[@]}

  cd ..
  echo 'Done formatting with eslint'
fi

echo 'Start format shell'
shfmt -bn -ci -i 2 -w -l \
  $(shfmt -f . | grep -v -e /node_modules)
echo 'Done formatting shell'

if [[ -z $(get_modified_python_files) ]]; then
  echo 'No modified python files found'
else
  echo 'Start format python'
  yapf \
    --verbose \
    --style='{based_on_style: google, SPLIT_BEFORE_FIRST_ARGUMENT:true}' \
    --in-place \
    --recursive \
    --exclude env-var-docs/venv \
    --exclude mock-web-services/.venv \
    .
fi
