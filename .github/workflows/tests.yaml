name: Tests

on:
  workflow_call:

  # Setting this enables manually triggering workflow in the GitHub UI
  # see https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch: {}

permissions: read-all

jobs:
  run_junit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: check out ${{ env.GITHUB_REF }}
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test container
        env:
          DOCKER_BUILDKIT: 1
        run: bin/build-dev

      - name: Build dev-oidc
        env:
          DOCKER_BUILDKIT: 1
        run: bin/build-dev-oidc
      - name: Run tests
        run: bin/run-test-ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: server/code-coverage/report/jacoco.xml
          verbose: true
          # We're getting intermittent issues with codecov trying to upload lately
          # disabling it from failing the entire pipeline for now.
          fail_ci_if_error: false

  run_typescript_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: check out ${{ env.GITHUB_REF }}
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test container
        env:
          DOCKER_BUILDKIT: 1
        run: bin/build-dev

      - name: Run tests
        run: bin/run-ts-tests

  # Dynamically builds the matrix for the next job. Defaults to only aws. If the
  # branch name contains azure we'll run against both aws and azure.
  setup-browser-test-matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}

    steps:
      - id: build-matrix
        env:
          # To get the branch name that we want we have to consider the event type. A PR will
          # use the head_ref whereas a push event (i.e. pushing an approve pr to main) needs
          # to look at the ref_name.
          BRANCH_NAME: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
        run: |
          # Temporarily ignore errors so we can check grep for matches
          set +e
          echo "BranchName: ${{ env.BRANCH_NAME }}"
          echo "${{ env.BRANCH_NAME }}" | grep --quiet --ignore-case "azure"
          if [[ $? -eq 0 ]]; then
              matrix='{"cloud": ["aws", "azure"], "shard_number": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}'
          else
              matrix='{"cloud": ["aws"], "shard_number": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}'
          fi
          # Re-enable error checking
          set -e
          echo "matrix=${matrix}"
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  run_browser_tests:
    needs: setup-browser-test-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-browser-test-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: check out ${{ env.GITHUB_REF }}
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test app container
        env:
          DOCKER_BUILDKIT: 1
        run: bin/build-dev

      - name: Build browser testing container
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USER_NAME }}
        run: bin/build-browser-tests

      - name: Build dev-oidc
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USER_NAME }}
        run: bin/build-dev-oidc

      - name: Build localstack
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USER_NAME }}
        run: bin/build-localstack-env

      - name: Build mock-web-services
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          DOCKER_HUB_USERNAME: civiform
        run: bin/build-mock-web-services

      - name: Bring up test env with ${{ matrix.cloud }}
        env:
          CI: true
        run: bin/run-browser-test-env --${{ matrix.cloud }} --ci

      - name: Run browser tests with ${{ matrix.cloud }}
        env:
          CI: true
        run: |
          if [[ "${{ matrix.cloud }}" == "azure" ]]; then
            bin/run-browser-tests-ci --shard="${{ matrix.shard_number }}/${{ strategy.job-total }}" --grep-invert "@skip-on-azure"
          else
            bin/run-browser-tests-ci --shard="${{ matrix.shard_number }}/${{ strategy.job-total }}"
          fi

      # We'll treat aws as the source of truth for images snapshots. Attempts to run both will
      # end up with two places trying to update the same images.
      - name: Verify no new image snapshots added
        if: ${{ matrix.cloud == 'aws' }}
        # jest-image-snapshots automatically adds snapshot if it's missing.
        # Use git diff to fail if we detect new images.
        run: git add browser-test/image_snapshots ; git diff --compact-summary --exit-code HEAD

      # Upload image diff files, these are the single image containing the before, after, and diff parts.
      # We want this for aws and azure so we have access to what happened in failed tests.
      - name: Upload image diff outputs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: image diff output directory (${{ matrix.cloud }}) - shard-${{ matrix.shard_number }}-run-${{ github.run_attempt }}
          retention-days: 3
          path: browser-test/diff_output

      # We only want updated snapshots for aws. Otherwise we'll hit conflicts if both aws and azure
      # attempt to update the same images
      - name: Upload updated snapshots
        if: ${{ matrix.cloud == 'aws' && failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: updated snapshots output directory (${{ matrix.cloud }}) - shard-${{ matrix.shard_number }}-run-${{ github.run_attempt }}
          retention-days: 3
          path: browser-test/updated_snapshots

      # Upload Playwright trace files and recorded videos. We want this for aws and azure so we
      # have access to what happened in failed tests.
      - name: Upload test videos on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: tests videos (${{ matrix.cloud }}) - shard-${{ matrix.shard_number }}-run-${{ github.run_attempt }}
          retention-days: 3
          path: |
            browser-test/tmp/html-output/
            browser-test/tmp/videos/

      - name: Print logs on failure
        if: failure()
        run: cat .dockerlogs

  test_prod:
    runs-on: ubuntu-latest
    steps:
      - name: check out ${{ env.GITHUB_REF }}
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build prod container
        env:
          DOCKER_BUILDKIT: 1
        run: bin/build-prod

      - name: Set local prod container tag
        run: docker tag civiform:latest civiform:prod

      - name: Build the stack
        run: docker compose -f test-support/prod-simulator-compose.yml up -d
      - name: Test
        # Confirm that we get a response on port 9000.
        run: while ! docker run --network host appropriate/curl -v -s --retry-max-time 180 --retry-connrefused http://localhost:8888/ ; do sleep 5; done
        timeout-minutes: 3
      - name: Print logs on failure
        if: failure()
        run: docker compose logs

